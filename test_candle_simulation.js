// üß™ CANDLE GENERATION SIMULATOR
// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π –ë–ï–ó –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
// –¶–µ–ª—å: –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–∫ –Ω–∞ Pocket Option (–±–æ–ª—å—à–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è OK, –Ω–æ –±–µ–∑ —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤)

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í =====
const TESTS = [
    {
        name: 'CURRENT (—Å –∂–µ—Å—Ç–∫–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ 0.85-1.15)',
        config: {
            basePrice: 1.0,
            volatility: 0.002,
            useBoundaries: true,
            boundaryMin: 0.85,
            boundaryMax: 1.15,
            meanReversionStrength: 0.05,
            trendStrength: 0.0003
        }
    },
    {
        name: 'NO BOUNDARIES (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)',
        config: {
            basePrice: 1.0,
            volatility: 0.002,
            useBoundaries: false,
            meanReversionStrength: 0.05,
            trendStrength: 0.0003
        }
    },
    {
        name: 'SOFT BOUNDARIES (–º—è–≥–∫–∏–µ —á–µ—Ä–µ–∑ mean reversion)',
        config: {
            basePrice: 1.0,
            volatility: 0.002,
            useBoundaries: false,
            meanReversionStrength: 0.15, // –£—Å–∏–ª–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–∑–µ
            trendStrength: 0.0003
        }
    },
    {
        name: 'DYNAMIC RANGE (¬±20% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã)',
        config: {
            basePrice: 1.0,
            volatility: 0.002,
            useBoundaries: 'dynamic',
            dynamicRange: 0.20, // ¬±20% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            meanReversionStrength: 0.05,
            trendStrength: 0.0003
        }
    },
    {
        name: 'POCKET OPTION STYLE (—É–≤–µ–ª–∏—á–µ–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å + –º—è–≥–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã)',
        config: {
            basePrice: 1.0,
            volatility: 0.004, // –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤ 2 —Ä–∞–∑–∞
            useBoundaries: false,
            meanReversionStrength: 0.08, // –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç
            trendStrength: 0.0006 // –£—Å–∏–ª–µ–Ω —Ç—Ä–µ–Ω–¥
        }
    },
    {
        name: 'HIGH VOLATILITY (–æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)',
        config: {
            basePrice: 1.0,
            volatility: 0.008, // –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤ 4 —Ä–∞–∑–∞
            useBoundaries: false,
            meanReversionStrength: 0.10,
            trendStrength: 0.0010
        }
    }
];

// ===== –°–ò–ú–£–õ–Ø–¢–û–† –°–í–ï–ß–ï–ô =====
class CandleSimulator {
    constructor(config) {
        this.basePrice = config.basePrice;
        this.currentPrice = config.basePrice;
        this.volatility = config.volatility;
        this.useBoundaries = config.useBoundaries;
        this.boundaryMin = config.boundaryMin;
        this.boundaryMax = config.boundaryMax;
        this.dynamicRange = config.dynamicRange;
        this.meanReversionStrength = config.meanReversionStrength;
        this.trendStrength = config.trendStrength;
        
        // –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
        this.trendCounter = 40 + Math.random() * 80;
        this.trendDir = (Math.random() - 0.5) * 2;
    }
    
    // Box-Muller –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    gaussianRandom() {
        let u = 0, v = 0;
        while (u === 0) u = Math.random();
        while (v === 0) v = Math.random();
        return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–Ω—ã
    generateNextPrice(currentPrice) {
        // 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        this.trendCounter--;
        if (this.trendCounter <= 0) {
            this.trendCounter = 40 + Math.random() * 80;
            this.trendDir = (Math.random() - 0.5) * 2;
        }
        
        // 2. –ë–∞–∑–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Ä—ã–Ω–æ—á–Ω—ã–π —à—É–º)
        const noise = (Math.random() - 0.5) * this.volatility;
        
        // 3. –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        const trend = this.trendDir * this.trendStrength;
        
        // 4. Mean reversion (–≤–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ)
        const deviation = (this.basePrice - currentPrice) / this.basePrice;
        const meanReversion = deviation * this.meanReversionStrength;
        
        // 5. –ò–º–∏—Ç–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –ø—É–ª—å—Å–∞
        const pulse = Math.sin(Date.now() / 3000) * 0.0003;
        
        // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        let nextPrice = currentPrice + trend + noise + meanReversion + pulse;
        
        // 6. –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
        if (this.useBoundaries === true) {
            // –ñ–µ—Å—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
            const minPrice = this.basePrice * this.boundaryMin;
            const maxPrice = this.basePrice * this.boundaryMax;
            nextPrice = Math.max(minPrice, Math.min(maxPrice, nextPrice));
        } else if (this.useBoundaries === 'dynamic') {
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¢–ï–ö–£–©–ï–ô —Ü–µ–Ω—ã
            const minPrice = currentPrice * (1 - this.dynamicRange);
            const maxPrice = currentPrice * (1 + this.dynamicRange);
            nextPrice = Math.max(minPrice, Math.min(maxPrice, nextPrice));
        }
        // –ï—Å–ª–∏ false - –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü –≤–æ–æ–±—â–µ
        
        return parseFloat(nextPrice.toFixed(6));
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–∏–∏ —Å–≤–µ—á–µ–π
    generateCandles(count, timeframeSeconds = 5) {
        const candles = [];
        let price = this.basePrice;
        let time = Math.floor(Date.now() / 1000);
        
        for (let i = 0; i < count; i++) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–≤–µ—á–∏ (—Å–∏–º—É–ª–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º)
            const ticksPerCandle = Math.floor(timeframeSeconds / 0.05); // –¢–∏–∫–∏ –∫–∞–∂–¥—ã–µ 50ms
            
            const open = price;
            let high = price;
            let low = price;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–π —Å–≤–µ—á–∏
            for (let t = 0; t < ticksPerCandle; t++) {
                price = this.generateNextPrice(price);
                high = Math.max(high, price);
                low = Math.min(low, price);
            }
            
            const close = price;
            
            candles.push({
                time,
                open,
                high,
                low,
                close,
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                bodySize: Math.abs(close - open),
                wickSize: (high - low) - Math.abs(close - open),
                totalRange: high - low
            });
            
            time += timeframeSeconds;
        }
        
        return candles;
    }
}

// ===== –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =====
function analyzeCandles(candles, testName, config) {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
    const prices = candles.map(c => c.close);
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);
    const avgPrice = prices.reduce((a, b) => a + b, 0) / prices.length;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
    const changes = [];
    for (let i = 1; i < candles.length; i++) {
        const change = Math.abs(candles[i].close - candles[i-1].close);
        const changePercent = (change / candles[i-1].close) * 100;
        changes.push({ absolute: change, percent: changePercent });
    }
    
    const avgChange = changes.reduce((a, b) => a + b.absolute, 0) / changes.length;
    const maxChange = Math.max(...changes.map(c => c.absolute));
    const avgChangePercent = changes.reduce((a, b) => a + b.percent, 0) / changes.length;
    const maxChangePercent = Math.max(...changes.map(c => c.percent));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —Å–≤–µ—á–µ–π
    const bodySizes = candles.map(c => c.bodySize);
    const wickSizes = candles.map(c => c.wickSize);
    const totalRanges = candles.map(c => c.totalRange);
    
    const avgBodySize = bodySizes.reduce((a, b) => a + b, 0) / bodySizes.length;
    const maxBodySize = Math.max(...bodySizes);
    const avgWickSize = wickSizes.reduce((a, b) => a + b, 0) / wickSizes.length;
    const avgTotalRange = totalRanges.reduce((a, b) => a + b, 0) / totalRanges.length;
    const maxTotalRange = Math.max(...totalRanges);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏ (> 1% –∑–∞ —Å–≤–µ—á—É = –ü–õ–û–•–û)
    const sharpJumps = changes.filter(c => c.percent > 1.0);
    const extremeJumps = changes.filter(c => c.percent > 2.0);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "—Å–≤–µ—á–∏ –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω" (> 5% –¥–∏–∞–ø–∞–∑–æ–Ω = –ü–õ–û–•–û)
    const hugeCandles = candles.filter(c => (c.totalRange / config.basePrice) * 100 > 5.0);
    
    // –î–∏–∞–ø–∞–∑–æ–Ω –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
    const priceRangeFromBase = ((maxPrice - minPrice) / config.basePrice) * 100;
    const maxDeviationFromBase = Math.max(
        Math.abs(maxPrice - config.basePrice),
        Math.abs(minPrice - config.basePrice)
    ) / config.basePrice * 100;
    
    return {
        testName,
        config,
        stats: {
            // –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            minPrice: minPrice.toFixed(6),
            maxPrice: maxPrice.toFixed(6),
            avgPrice: avgPrice.toFixed(6),
            priceRange: (maxPrice - minPrice).toFixed(6),
            priceRangePercent: priceRangeFromBase.toFixed(2) + '%',
            maxDeviationFromBase: maxDeviationFromBase.toFixed(2) + '%',
            
            // –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
            avgChange: avgChange.toFixed(6),
            maxChange: maxChange.toFixed(6),
            avgChangePercent: avgChangePercent.toFixed(4) + '%',
            maxChangePercent: maxChangePercent.toFixed(4) + '%',
            
            // –†–∞–∑–º–µ—Ä—ã —Å–≤–µ—á–µ–π
            avgBodySize: avgBodySize.toFixed(6),
            maxBodySize: maxBodySize.toFixed(6),
            avgWickSize: avgWickSize.toFixed(6),
            avgTotalRange: avgTotalRange.toFixed(6),
            maxTotalRange: maxTotalRange.toFixed(6),
            
            // –ü—Ä–æ–±–ª–µ–º—ã
            sharpJumpsCount: sharpJumps.length,
            extremeJumpsCount: extremeJumps.length,
            hugeCandlesCount: hugeCandles.length,
            
            // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            isSmooth: sharpJumps.length === 0 && extremeJumps.length === 0,
            hasReasonableSize: hugeCandles.length === 0,
            quality: getQualityRating(sharpJumps.length, extremeJumps.length, hugeCandles.length, priceRangeFromBase)
        }
    };
}

// –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (0-10)
function getQualityRating(sharpJumps, extremeJumps, hugeCandles, priceRange) {
    let rating = 10;
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏
    rating -= sharpJumps * 0.1;
    rating -= extremeJumps * 0.3;
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ –æ–≥—Ä–æ–º–Ω—ã–µ —Å–≤–µ—á–∏
    rating -= hugeCandles * 0.2;
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω (< 2%) - —Å–∫—É—á–Ω–æ
    if (priceRange < 2.0) {
        rating -= (2.0 - priceRange);
    }
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω (> 15%) - –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è 5 –º–∏–Ω—É—Ç
    if (priceRange > 15.0) {
        rating -= (priceRange - 15.0) * 0.5;
    }
    
    return Math.max(0, Math.min(10, rating)).toFixed(1);
}

// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (ASCII –≥—Ä–∞—Ñ–∏–∫)
function visualizePrice(candles, width = 80, height = 20) {
    const prices = candles.map(c => c.close);
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);
    const priceRange = maxPrice - minPrice;
    
    if (priceRange === 0) return 'No price movement';
    
    // –°–æ–∑–¥–∞–µ–º 2D –º–∞—Å—Å–∏–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const chart = Array(height).fill(null).map(() => Array(width).fill(' '));
    
    // –ù–∞–Ω–æ—Å–∏–º —Ü–µ–Ω—ã
    const step = candles.length / width;
    for (let x = 0; x < width; x++) {
        const candleIdx = Math.floor(x * step);
        if (candleIdx >= candles.length) continue;
        
        const price = candles[candleIdx].close;
        const normalizedPrice = (price - minPrice) / priceRange;
        const y = Math.floor((1 - normalizedPrice) * (height - 1));
        
        chart[y][x] = '‚ñà';
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    const lines = chart.map((row, idx) => {
        const price = minPrice + (priceRange * (1 - idx / (height - 1)));
        return `${price.toFixed(4)} ‚îÇ${row.join('')}`;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    lines.push('        ‚îî' + '‚îÄ'.repeat(width));
    lines.push(`         0${' '.repeat(Math.floor(width/2) - 8)}${Math.floor(candles.length/2)}${' '.repeat(Math.floor(width/2) - 8)}${candles.length}`);
    
    return lines.join('\n');
}

// ===== –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í =====
console.log('üß™ CANDLE GENERATION SIMULATOR\n');
console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1000 —Å–≤–µ—á–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
console.log('–¶–µ–ª—å: –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–∫ –Ω–∞ Pocket Option\n');
console.log('='.repeat(100));

const results = [];

for (const test of TESTS) {
    console.log('\n' + '='.repeat(100));
    console.log(`üìä –¢–ï–°–¢: ${test.name}`);
    console.log('='.repeat(100));
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–µ—á–∏
    const simulator = new CandleSimulator(test.config);
    const candles = simulator.generateCandles(1000, 5); // 1000 —Å–≤–µ—á–µ–π –ø–æ 5 —Å–µ–∫—É–Ω–¥
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    const analysis = analyzeCandles(candles, test.name, test.config);
    results.push(analysis);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìà –¶–ï–ù–û–í–û–ï –î–í–ò–ñ–ï–ù–ò–ï:');
    console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω: ${analysis.stats.minPrice} - ${analysis.stats.maxPrice} (${analysis.stats.priceRange})`);
    console.log(`   –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã: ${analysis.stats.priceRangePercent} (–º–∞–∫—Å: ${analysis.stats.maxDeviationFromBase})`);
    
    console.log('\nüìä –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ú–ï–ñ–î–£ –°–í–ï–ß–ê–ú–ò:');
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ: ${analysis.stats.avgChange} (${analysis.stats.avgChangePercent})`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º: ${analysis.stats.maxChange} (${analysis.stats.maxChangePercent})`);
    
    console.log('\nüïØÔ∏è  –†–ê–ó–ú–ï–†–´ –°–í–ï–ß–ï–ô:');
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ —Ç–µ–ª–æ: ${analysis.stats.avgBodySize}`);
    console.log(`   –ú–∞–∫—Å —Ç–µ–ª–æ: ${analysis.stats.maxBodySize}`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–π —Ñ–∏—Ç–∏–ª—å: ${analysis.stats.avgWickSize}`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${analysis.stats.avgTotalRange}`);
    console.log(`   –ú–∞–∫—Å –¥–∏–∞–ø–∞–∑–æ–Ω: ${analysis.stats.maxTotalRange}`);
    
    console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´:');
    console.log(`   –†–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏ (>1%): ${analysis.stats.sharpJumpsCount}`);
    console.log(`   –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–∫–∞—á–∫–∏ (>2%): ${analysis.stats.extremeJumpsCount}`);
    console.log(`   –û–≥—Ä–æ–º–Ω—ã–µ —Å–≤–µ—á–∏ (>5%): ${analysis.stats.hugeCandlesCount}`);
    
    console.log('\n‚úÖ –ö–ê–ß–ï–°–¢–í–û:');
    console.log(`   –ü–ª–∞–≤–Ω–æ—Å—Ç—å: ${analysis.stats.isSmooth ? '‚úì –î–ê' : '‚úó –ù–ï–¢'}`);
    console.log(`   –ê–¥–µ–∫–≤–∞—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${analysis.stats.hasReasonableSize ? '‚úì –î–ê' : '‚úó –ù–ï–¢'}`);
    console.log(`   –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${analysis.stats.quality}/10`);
    
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    console.log('\nüìâ –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø (–ø–µ—Ä–≤—ã–µ 1000 —Å–≤–µ—á–µ–π):');
    console.log(visualizePrice(candles));
}

// ===== –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê =====
console.log('\n\n' + '='.repeat(100));
console.log('üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í');
console.log('='.repeat(100));

console.log('\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
console.log('‚îÇ –¢–µ—Å—Ç                                        ‚îÇ –î–∏–∞–ø–∞–∑–æ–Ω  ‚îÇ –ú–∞–∫—Å —Å–∫–∞—á–æ–∫‚îÇ –ü—Ä–æ–±–ª–µ–º—ã ‚îÇ –ü–ª–∞–≤–Ω–æ—Å—Ç—å  ‚îÇ –û—Ü–µ–Ω–∫–∞   ‚îÇ');
console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');

for (const result of results) {
    const name = result.testName.substring(0, 43).padEnd(43);
    const range = result.stats.priceRangePercent.padEnd(9);
    const maxChange = result.stats.maxChangePercent.padEnd(10);
    const problems = (result.stats.sharpJumpsCount + result.stats.extremeJumpsCount + result.stats.hugeCandlesCount).toString().padEnd(8);
    const smooth = (result.stats.isSmooth ? '‚úì –î–∞' : '‚úó –ù–µ—Ç').padEnd(10);
    const quality = (result.stats.quality + '/10').padEnd(8);
    
    console.log(`‚îÇ ${name} ‚îÇ ${range} ‚îÇ ${maxChange} ‚îÇ ${problems} ‚îÇ ${smooth} ‚îÇ ${quality} ‚îÇ`);
}

console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

// ===== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò =====
console.log('\n\n' + '='.repeat(100));
console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
console.log('='.repeat(100));

const bestResult = results.reduce((best, current) => 
    parseFloat(current.stats.quality) > parseFloat(best.stats.quality) ? current : best
);

console.log(`\n‚úÖ –õ–£–ß–®–ò–ô –í–ê–†–ò–ê–ù–¢: ${bestResult.testName}`);
console.log(`   –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${bestResult.stats.quality}/10`);
console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω –¥–≤–∏–∂–µ–Ω–∏—è: ${bestResult.stats.priceRangePercent}`);
console.log(`   –ü–ª–∞–≤–Ω–æ—Å—Ç—å: ${bestResult.stats.isSmooth ? '‚úì' : '‚úó'}`);

console.log('\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:');
console.log(`   volatility: ${bestResult.config.volatility}`);
console.log(`   meanReversionStrength: ${bestResult.config.meanReversionStrength}`);
console.log(`   trendStrength: ${bestResult.config.trendStrength}`);
console.log(`   useBoundaries: ${bestResult.config.useBoundaries}`);

console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
console.log('   1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞—Ä–∏–∞–Ω—Ç');
console.log('   2. –ú–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
console.log('   3. –ü—Ä–∏–º–µ–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ chartGenerator.js');
console.log('\n' + '='.repeat(100));
