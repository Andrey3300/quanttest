// Backend Error Logger
// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª

const fs = require('fs');
const path = require('path');

class ErrorLogger {
    constructor(logDir = 'logs') {
        this.logDir = logDir;
        this.logFile = path.join(logDir, 'chart-debug.log');
        this.errorFile = path.join(logDir, 'chart-errors.log');
        this.maxFileSize = 10 * 1024 * 1024; // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: 10 MB (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —Ä–æ—Ç–∞—Ü–∏–∏)
        this.maxLogFiles = 5; // üöÄ –•—Ä–∞–Ω–∏–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        
        // üéØ –£–†–û–í–ù–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
        // debug = 0, info = 1, warn = 2, error = 3
        this.LOG_LEVELS = {
            debug: 0,
            info: 1,
            warn: 2,
            error: 3
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'warn' - –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
        const consoleLevel = process.env.LOG_LEVEL || 'warn';
        this.consoleLogLevel = this.LOG_LEVELS[consoleLevel] || this.LOG_LEVELS.warn;
        
        // –í —Ñ–∞–π–ª –ø–∏—à–µ–º –≤—Å—ë (debug –∏ –≤—ã—à–µ)
        this.fileLogLevel = this.LOG_LEVELS.debug;
        
        // üöÄ –ë–ê–¢–ß–ò–ù–ì: –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª
        this.writeBuffer = [];
        this.maxBufferSize = 50; // –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        this.flushInterval = 2000; // –ò–ª–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        this.lastFlushTime = Date.now();
        
        // üöÄ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        this.rotationCheckCounter = 0;
        this.rotationCheckInterval = 100; // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
        this.lastRotationCheck = Date.now();
        
        // üöÄ –ê–ì–†–ï–ì–ê–¶–ò–Ø: –°—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
        this.messageAggregator = new Map();
        this.aggregationInterval = 5000; // –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 5 —Å–µ–∫—É–Ω–¥
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        this.ensureLogDirectory();
        
        // üöÄ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π flush –±—É—Ñ–µ—Ä–∞
        this.flushTimer = setInterval(() => this.flushBuffer(), this.flushInterval);
        
        // üöÄ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        this.aggregationTimer = setInterval(() => this.flushAggregatedMessages(), this.aggregationInterval);
        
        console.log('[Logger] Backend logging initialized');
        console.log(`[Logger] Console level: ${consoleLevel} (${this.consoleLogLevel})`);
        console.log(`[Logger] File size limit: ${this.maxFileSize / (1024 * 1024)} MB`);
        console.log(`[Logger] Batching: ${this.maxBufferSize} messages, flush every ${this.flushInterval}ms`);
        console.log(`[Logger] Rotation check: every ${this.rotationCheckInterval} writes`);
        console.log(`[Logger] Log file: ${this.logFile}`);
        console.log(`[Logger] Error file: ${this.errorFile}`);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    ensureLogDirectory() {
        try {
            if (!fs.existsSync(this.logDir)) {
                fs.mkdirSync(this.logDir, { recursive: true });
                console.log(`[Logger] Created log directory: ${this.logDir}`);
            }
        } catch (error) {
            console.error('[Logger] Failed to create log directory:', error);
        }
    }

    // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ä–æ—Ç–∞—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–æ–∫
    checkRotation(filepath) {
        try {
            // üöÄ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏!
            this.rotationCheckCounter++;
            const timeSinceLastCheck = Date.now() - this.lastRotationCheck;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ N –∑–∞–ø–∏—Å–µ–π –ò–õ–ò –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if (this.rotationCheckCounter < this.rotationCheckInterval && timeSinceLastCheck < 10000) {
                return;
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            this.rotationCheckCounter = 0;
            this.lastRotationCheck = Date.now();
            
            if (fs.existsSync(filepath)) {
                const stats = fs.statSync(filepath);
                if (stats.size > this.maxFileSize) {
                    // –†–æ—Ç–∞—Ü–∏—è: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
                    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                    const backupPath = filepath.replace(/\.log$/, `-${timestamp}.log`);
                    fs.renameSync(filepath, backupPath);
                    
                    console.log(`[Logger] Rotated log file: ${path.basename(backupPath)} (${(stats.size / (1024 * 1024)).toFixed(2)} MB)`);
                    
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N)
                    this.cleanupRotatedFiles(filepath);
                }
            }
        } catch (error) {
            console.error('[Logger] Error during log rotation:', error);
        }
    }
    
    // üöÄ –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    cleanupRotatedFiles(baseFilepath) {
        try {
            const dir = path.dirname(baseFilepath);
            const baseName = path.basename(baseFilepath, '.log');
            const files = fs.readdirSync(dir);
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            const rotatedFiles = files
                .filter(f => f.startsWith(baseName) && f.endsWith('.log') && f !== path.basename(baseFilepath))
                .map(f => ({
                    name: f,
                    path: path.join(dir, f),
                    mtime: fs.statSync(path.join(dir, f)).mtimeMs
                }))
                .sort((a, b) => b.mtime - a.mtime); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            
            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ N —à—Ç—É–∫
            if (rotatedFiles.length > this.maxLogFiles) {
                const filesToDelete = rotatedFiles.slice(this.maxLogFiles);
                filesToDelete.forEach(file => {
                    fs.unlinkSync(file.path);
                    console.log(`[Logger] Deleted old rotated log: ${file.name}`);
                });
            }
        } catch (error) {
            console.error('[Logger] Error cleaning rotated files:', error);
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞
    formatMessage(level, category, message, data) {
        const timestamp = new Date().toISOString();
        let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;
        
        if (data) {
            try {
                const dataStr = typeof data === 'object' ? JSON.stringify(data, null, 2) : String(data);
                formatted += '\n  Data: ' + dataStr.split('\n').join('\n  ');
            } catch (error) {
                formatted += `\n  Data: [Error stringifying: ${error.message}]`;
            }
        }
        
        return formatted + '\n';
    }

    // üöÄ –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    writeToFile(filepath, message) {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
            this.writeBuffer.push({ filepath, message });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –±—É—Ñ–µ—Ä
            const timeSinceFlush = Date.now() - this.lastFlushTime;
            if (this.writeBuffer.length >= this.maxBufferSize || timeSinceFlush >= this.flushInterval) {
                this.flushBuffer();
            }
        } catch (error) {
            console.error('[Logger] Failed to buffer log message:', error);
        }
    }
    
    // üöÄ –ù–û–í–û–ï: –°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –≤ —Ñ–∞–π–ª
    flushBuffer() {
        if (this.writeBuffer.length === 0) return;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Ç–∞—Ü–∏—é –û–î–ò–ù —Ä–∞–∑ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤—Å–µ–≥–æ –±—É—Ñ–µ—Ä–∞
            const uniqueFiles = [...new Set(this.writeBuffer.map(item => item.filepath))];
            uniqueFiles.forEach(filepath => this.checkRotation(filepath));
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ñ–∞–π–ª–∞–º
            const fileGroups = {};
            this.writeBuffer.forEach(({ filepath, message }) => {
                if (!fileGroups[filepath]) {
                    fileGroups[filepath] = [];
                }
                fileGroups[filepath].push(message);
            });
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—á–∫–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            Object.entries(fileGroups).forEach(([filepath, messages]) => {
                const combined = messages.join('');
                fs.appendFileSync(filepath, combined, 'utf8');
            });
            
            // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            this.writeBuffer = [];
            this.lastFlushTime = Date.now();
        } catch (error) {
            console.error('[Logger] Failed to flush buffer:', error);
            this.writeBuffer = []; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    // üöÄ –ù–û–í–û–ï: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
    aggregateMessage(level, category, message) {
        // –î–ª—è error –∏ warn –Ω–µ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º - –≤–∞–∂–Ω–æ –≤–∏–¥–µ—Ç—å –∫–∞–∂–¥–æ–µ
        if (level === 'error' || level === 'warn') {
            return false;
        }
        
        const key = `${level}:${category}:${message}`;
        const now = Date.now();
        
        if (!this.messageAggregator.has(key)) {
            this.messageAggregator.set(key, {
                count: 1,
                firstTime: now,
                lastTime: now,
                level,
                category,
                message
            });
            return false; // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
        }
        
        const entry = this.messageAggregator.get(key);
        entry.count++;
        entry.lastTime = now;
        return true; // –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ
    }
    
    // üöÄ –ù–û–í–û–ï: –°–±—Ä–æ—Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    flushAggregatedMessages() {
        if (this.messageAggregator.size === 0) return;
        
        this.messageAggregator.forEach((entry, key) => {
            if (entry.count > 1) {
                const duration = ((entry.lastTime - entry.firstTime) / 1000).toFixed(1);
                const formatted = this.formatMessage(
                    entry.level,
                    entry.category,
                    `[AGGREGATED ${entry.count}x in ${duration}s] ${entry.message}`,
                    null
                );
                this.writeToFile(this.logFile, formatted);
            }
        });
        
        this.messageAggregator.clear();
    }
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log(level, category, message, data = null) {
        const levelValue = this.LOG_LEVELS[level] || 0;
        
        // üöÄ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è DEBUG —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ data
        if (level === 'debug' && !data) {
            const aggregated = this.aggregateMessage(level, category, message);
            if (aggregated) {
                return; // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ, –Ω–µ –ø–∏—à–µ–º —Å—Ä–∞–∑—É
            }
        }
        
        const formatted = this.formatMessage(level, category, message, data);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª (–µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π)
        if (levelValue >= this.fileLogLevel) {
            this.writeToFile(this.logFile, formatted);
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏ –≤ —Ñ–∞–π–ª –æ—à–∏–±–æ–∫
        if (level === 'error') {
            this.writeToFile(this.errorFile, formatted);
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π
        if (levelValue >= this.consoleLogLevel) {
            const consoleMethod = level === 'error' ? console.error : 
                                level === 'warn' ? console.warn : console.log;
            
            // –î–ª—è –∫–æ–Ω—Å–æ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ data (–µ—Å–ª–∏ –Ω–µ –æ—à–∏–±–∫–∞)
            if (level === 'error' || level === 'warn') {
                consoleMethod(`[${category}] ${message}`, data || '');
            } else {
                consoleMethod(`[${category}] ${message}`);
            }
        }
    }

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    error(category, message, data) {
        this.log('error', category, message, data);
    }

    warn(category, message, data) {
        this.log('warn', category, message, data);
    }

    info(category, message, data) {
        this.log('info', category, message, data);
    }

    debug(category, message, data) {
        this.log('debug', category, message, data);
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
    logCandle(type, symbol, candle) {
        this.debug('candle', `${type} for ${symbol}`, {
            time: candle.time,
            timeISO: new Date(candle.time * 1000).toISOString(),
            open: candle.open,
            high: candle.high,
            low: candle.low,
            close: candle.close,
            volume: candle.volume,
            valid: this.validateCandle(candle)
        });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≤–µ—á–∏
    validateCandle(candle) {
        const checks = {
            hasTime: typeof candle.time === 'number' && !isNaN(candle.time),
            hasOHLC: typeof candle.open === 'number' && 
                    typeof candle.high === 'number' && 
                    typeof candle.low === 'number' && 
                    typeof candle.close === 'number',
            validOHLC: candle.high >= candle.low &&
                      candle.high >= candle.open &&
                      candle.high >= candle.close &&
                      candle.low <= candle.open &&
                      candle.low <= candle.close,
            positiveValues: candle.open > 0 && candle.high > 0 && 
                          candle.low > 0 && candle.close > 0
        };

        const isValid = Object.values(checks).every(v => v);
        
        if (!isValid) {
            this.error('validation', 'Invalid candle detected', { candle, checks });
        }

        return { isValid, checks };
    }

    // üöÄ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å!)
    cleanOldLogs(hours = 1) {
        try {
            if (!fs.existsSync(this.logDir)) {
                return;
            }
            
            const files = fs.readdirSync(this.logDir);
            const now = Date.now();
            const maxAge = hours * 60 * 60 * 1000; // –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            let deletedCount = 0;
            let deletedSize = 0;

            files.forEach(file => {
                const filepath = path.join(this.logDir, file);
                try {
                    const stats = fs.statSync(filepath);
                    
                    if (now - stats.mtimeMs > maxAge) {
                        deletedSize += stats.size;
                        fs.unlinkSync(filepath);
                        deletedCount++;
                    }
                } catch (err) {
                    // –§–∞–π–ª –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                }
            });
            
            if (deletedCount > 0) {
                const sizeMB = (deletedSize / (1024 * 1024)).toFixed(2);
                console.log(`[Logger] Cleaned ${deletedCount} old log files (${sizeMB} MB freed)`);
            }
        } catch (error) {
            console.error('[Logger] Error cleaning old logs:', error);
        }
    }
    
    // üöÄ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
    shutdown() {
        console.log('[Logger] Shutting down logger...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if (this.flushTimer) clearInterval(this.flushTimer);
        if (this.aggregationTimer) clearInterval(this.aggregationTimer);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
        this.flushAggregatedMessages();
        this.flushBuffer();
        
        console.log('[Logger] Shutdown complete');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
const logger = new ErrorLogger();

// üöÄ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.cleanOldLogs(1);

// üöÄ –ù–û–í–û–ï: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
    logger.cleanOldLogs(1);
}, 10 * 60 * 1000);

// üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è flush –±—É—Ñ–µ—Ä–æ–≤
process.on('SIGINT', () => {
    logger.shutdown();
    process.exit(0);
});

process.on('SIGTERM', () => {
    logger.shutdown();
    process.exit(0);
});

process.on('beforeExit', () => {
    logger.shutdown();
});

module.exports = logger;
