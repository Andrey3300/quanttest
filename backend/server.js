const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');
const WebSocket = require('ws');
const http = require('http');
const { getGenerator, saveAllGenerators, initializeAllGenerators, SYMBOL_CONFIG } = require('./chartGenerator');
const logger = require('./errorLogger');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;
const server = http.createServer(app);

app.use(cors());
app.use(express.json());
app.use(express.static('frontend'));

// Users file path
const USERS_FILE = path.join(__dirname, 'users.json');

// Load users from file
function loadUsers() {
  try {
    if (fs.existsSync(USERS_FILE)) {
      const data = fs.readFileSync(USERS_FILE, 'utf8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('Error loading users:', error);
  }
  return [];
}

// Save users to file
function saveUsers(users) {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2), 'utf8');
  } catch (error) {
    console.error('Error saving users:', error);
  }
}

// Initialize users
let users = loadUsers();

// Email transporter
const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 587,
  secure: false,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Access denied' });
  }

  jwt.verify(token, process.env.JWT_SECRET || 'secret', (err, user) => {
    if (err) {
      console.error('Token verification error:', err);
      return res.status(403).json({ error: 'Invalid token' });
    }
    req.user = user;
    next();
  });
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = users.find(u => u.email === email);
    if (existingUser) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const validPassword = await bcrypt.compare(password, existingUser.password);
      if (!validPassword) {
        return res.status(400).json({ error: 'Incorrect password' });
      }

      // –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
      const token = jwt.sign({ id: existingUser.id, email: existingUser.email }, process.env.JWT_SECRET || 'secret', { expiresIn: '24h' });

      return res.json({
        token,
        user: {
          id: existingUser.id,
          email: existingUser.email,
          demoBalance: existingUser.demoBalance || 10000,
          realBalance: existingUser.realBalance || 0,
          activeAccount: existingUser.activeAccount || 'demo'
        }
      });
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = {
      id: users.length > 0 ? Math.max(...users.map(u => u.id)) + 1 : 1,
      email,
      password: hashedPassword,
      demoBalance: 10000, // –î–µ–º–æ –±–∞–ª–∞–Ω—Å
      realBalance: 0, // –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      activeAccount: 'demo', // –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      createdAt: new Date().toISOString()
    };

    users.push(user);
    saveUsers(users);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET || 'secret', { expiresIn: '24h' });

    res.json({
      token,
      user: {
        id: user.id,
        email: user.email,
        demoBalance: user.demoBalance,
        realBalance: user.realBalance,
        activeAccount: user.activeAccount
      }
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ error: 'Registration failed' });
  }
});

// –í—Ö–æ–¥
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = users.find(u => u.email === email);
    if (!user) {
      return res.status(400).json({ error: 'Invalid credentials' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return res.status(400).json({ error: 'Invalid credentials' });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET || 'secret', { expiresIn: '24h' });

    res.json({
      token,
      user: {
        id: user.id,
        email: user.email,
        demoBalance: user.demoBalance || 10000,
        realBalance: user.realBalance || 0,
        activeAccount: user.activeAccount || 'demo'
      }
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Login failed' });
  }
});

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
app.post('/api/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ error: 'Email is required' });
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = users.find(u => u.email === email);
    if (!user) {
      // –ò–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ email –Ω–µ –Ω–∞–π–¥–µ–Ω
      return res.json({ message: 'If email exists, password reset link has been sent' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const newPassword = Math.random().toString(36).slice(-8);
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email (–≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º)
    console.log(`New password for ${email}: ${newPassword}`);

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email:
    // await transporter.sendMail({
    //   from: process.env.EMAIL_USER,
    //   to: email,
    //   subject: 'Password Reset - QuantFX',
    //   text: `Your new password is: ${newPassword}`
    // });

    res.json({ message: 'New password has been sent to your email' });
  } catch (error) {
    console.error('Password reset error:', error);
    res.status(500).json({ error: 'Password reset failed' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/api/user', authenticateToken, (req, res) => {
  const user = users.find(u => u.id === req.user.id);
  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  res.json({
    id: user.id,
    email: user.email,
    demoBalance: user.demoBalance || 10000,
    realBalance: user.realBalance || 0,
    activeAccount: user.activeAccount || 'demo'
  });
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
app.post('/api/switch-account', authenticateToken, (req, res) => {
  const { accountType } = req.body;
  
  if (accountType !== 'demo' && accountType !== 'real') {
    return res.status(400).json({ error: 'Invalid account type' });
  }
  
  const user = users.find(u => u.id === req.user.id);
  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }
  
  user.activeAccount = accountType;
  saveUsers(users);
  
  res.json({
    id: user.id,
    email: user.email,
    demoBalance: user.demoBalance || 10000,
    realBalance: user.realBalance || 0,
    activeAccount: user.activeAccount
  });
});

// ===== CHART API =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
// üéØ MULTI-TIMEFRAME: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ timeframe –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
app.get('/api/chart/history', (req, res) => {
  try {
    const symbol = req.query.symbol || 'USD_MXN';
    const timeframe = req.query.timeframe || 'S5'; // üéØ –ù–û–í–û–ï
    const from = req.query.from ? parseInt(req.query.from) : null;
    const to = req.query.to ? parseInt(req.query.to) : null;
    
    const generator = getGenerator(symbol, timeframe); // üéØ –ù–û–í–û–ï
    const data = generator.getHistoricalData(from, to);
    
    res.json({
      symbol,
      timeframe, // üéØ –ù–û–í–û–ï
      data
    });
  } catch (error) {
    console.error('Chart history error:', error);
    res.status(500).json({ error: 'Failed to fetch chart data' });
  }
});

// üéØ ENDPOINT: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–µ—á–∏ (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–∞)
// üéØ MULTI-TIMEFRAME: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ timeframe
app.get('/api/chart/current-state/:symbol', (req, res) => {
  try {
    const symbol = req.params.symbol;
    const timeframe = req.query.timeframe || 'S5'; // üéØ –ù–û–í–û–ï
    
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol is required' });
    }
    
    const generator = getGenerator(symbol, timeframe); // üéØ –ù–û–í–û–ï
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!generator.candles || generator.candles.length === 0) {
      logger.warn('api', 'Generator not initialized for current-state request', { symbol, timeframe });
      return res.status(503).json({ error: 'Generator not ready yet' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const lastCandle = generator.candles[generator.candles.length - 1];
    const currentState = generator.currentCandleState || lastCandle;
    
    logger.debug('api', 'Current state requested', {
      symbol,
      timeframe, // üéØ –ù–û–í–û–ï
      lastCandleTime: lastCandle.time,
      currentStateTime: currentState.time,
      currentPrice: generator.currentPrice
    });
    
    res.json({
      symbol,
      timeframe, // üéØ –ù–û–í–û–ï
      lastCandle,
      currentState,
      currentPrice: generator.currentPrice,
      candleCount: generator.candles.length,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Current state error:', error);
    logger.error('api', 'Failed to get current state', {
      symbol: req.params.symbol,
      timeframe: req.query.timeframe,
      error: error.message
    });
    res.status(500).json({ error: 'Failed to fetch current state' });
  }
});

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¢–û–†–û–í 24/7 =====

// üßπ –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
console.log('üßπ Cleaning old logs before server start...');
const logDir = path.join(__dirname, '..', 'logs');
if (fs.existsSync(logDir)) {
    const files = fs.readdirSync(logDir);
    let cleaned = 0;
    files.forEach(file => {
        try {
            fs.unlinkSync(path.join(logDir, file));
            cleaned++;
        } catch (err) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
    });
    console.log(`‚úÖ Cleaned ${cleaned} old log files`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
console.log('üöÄ Initializing chart generators for 24/7 operation...');
console.log('   (optimized: 1 day history with smart validation & silent mode)');

// üõ°Ô∏è –ó–ê–©–ò–¢–ê: Timeout –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã)
const initTimeout = setTimeout(() => {
    console.error('‚ùå CRITICAL: Generator initialization timeout (>2min)');
    console.error('   This should never happen. Check logs/chart-debug.log for details.');
    console.error('   Terminating process...');
    process.exit(1);
}, 120000); // 2 –º–∏–Ω—É—Ç—ã

try {
    initializeAllGenerators();
    clearTimeout(initTimeout); // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ - –æ—Ç–º–µ–Ω—è–µ–º timeout
    console.log('‚úÖ All chart generators are running!');
} catch (error) {
    clearTimeout(initTimeout);
    console.error('‚ùå CRITICAL: Generator initialization failed:', error);
    logger.error('initialization', 'Fatal initialization error', {
        error: error.message,
        stack: error.stack
    });
    console.error('   Terminating process...');
    process.exit(1);
}

// ===== WEBSOCKET SERVER =====

// –°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
const wss = new WebSocket.Server({ server, path: '/ws/chart' });

// üéØ MULTI-TIMEFRAME: –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ "symbol:timeframe"
const subscriptions = new Map(); // "symbol:timeframe" -> Set of WebSocket connections

wss.on('connection', (ws, req) => {
  logger.debug('websocket', 'New WebSocket connection');
  
  let currentSubscription = null; // "symbol:timeframe"
  
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      
      if (data.type === 'subscribe') {
        const symbol = data.symbol || 'USD_MXN';
        const timeframe = data.timeframe || 'S5'; // üéØ –ù–û–í–û–ï
        const subscriptionKey = `${symbol}:${timeframe}`;
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if (currentSubscription && subscriptions.has(currentSubscription)) {
          subscriptions.get(currentSubscription).delete(ws);
          logger.debug('websocket', `Client unsubscribed from ${currentSubscription} (auto)`);
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π symbol:timeframe
        currentSubscription = subscriptionKey;
        if (!subscriptions.has(subscriptionKey)) {
          subscriptions.set(subscriptionKey, new Set());
        }
        subscriptions.get(subscriptionKey).add(ws);
        
        logger.debug('websocket', `Client subscribed to ${subscriptionKey}`);
        
        // üéØ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const generator = getGenerator(symbol, timeframe);
        
        if (generator && generator.candles && generator.candles.length > 0) {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
          let currentCandle = null;
          
          // –î–ª—è S5 - –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞
          if (timeframe === 'S5') {
            currentCandle = generator.candles[generator.candles.length - 1];
          } else {
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ - —Ç–µ–∫—É—â–∞—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–µ—á–∞
            if (generator.aggregator && generator.aggregator.currentAggregatedCandle) {
              currentCandle = generator.aggregator.currentAggregatedCandle;
            } else if (generator.candles.length > 0) {
              // Fallback –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π
              currentCandle = generator.candles[generator.candles.length - 1];
            }
          }
          
          if (currentCandle) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            const { TIMEFRAMES } = require('./chartGenerator');
            const timeframeSeconds = TIMEFRAMES[timeframe]?.seconds || 5;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            ws.send(JSON.stringify({
              type: 'currentState',
              symbol,
              timeframe,
              candle: currentCandle,
              candleStartTime: currentCandle.time,
              timeframeSeconds: timeframeSeconds,
              serverTime: Math.floor(Date.now() / 1000)
            }));
            
            logger.info('websocket', `‚úÖ Sent current state for ${subscriptionKey}`, {
              candleTime: currentCandle.time,
              candleStartTime: currentCandle.time,
              timeframeSeconds: timeframeSeconds,
              price: currentCandle.close
            });
          } else {
            logger.warn('websocket', `‚ö†Ô∏è No current candle available for ${subscriptionKey}`);
          }
        } else {
          logger.warn('websocket', `‚ö†Ô∏è Generator not ready for ${subscriptionKey}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        ws.send(JSON.stringify({
          type: 'subscribed',
          symbol,
          timeframe // üéØ –ù–û–í–û–ï
        }));
      } else if (data.type === 'unsubscribe') {
        const symbol = data.symbol;
        const timeframe = data.timeframe || 'S5'; // üéØ –ù–û–í–û–ï
        const subscriptionKey = `${symbol}:${timeframe}`;
        
        if (subscriptionKey && subscriptions.has(subscriptionKey)) {
          subscriptions.get(subscriptionKey).delete(ws);
          logger.debug('websocket', `Client explicitly unsubscribed from ${subscriptionKey}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
          ws.send(JSON.stringify({
            type: 'unsubscribed',
            symbol,
            timeframe // üéØ –ù–û–í–û–ï
          }));
        }
        
        if (currentSubscription === subscriptionKey) {
          currentSubscription = null;
        }
      }
    } catch (error) {
      console.error('WebSocket message error:', error);
    }
  });
  
  ws.on('close', () => {
    // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    if (currentSubscription && subscriptions.has(currentSubscription)) {
      subscriptions.get(currentSubscription).delete(ws);
    }
    logger.debug('websocket', 'WebSocket connection closed');
  });
  
  ws.on('error', (error) => {
    console.error('WebSocket error:', error);
  });
});

// –§–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∏–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏
let isCreatingNewCandle = false;

// üî• –£–õ–£–ß–®–ï–ù–ò–ï: –ü–ª–∞–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ (—Ç–∏–∫–∏) –¥–ª—è –í–°–ï–• —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
// –ö–∞–∂–¥—ã–µ 250ms –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—á–∏ (4 –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É)
// üéØ S5: –∏—Å–ø–æ–ª—å–∑—É–µ–º generateCandleTick() –¥–ª—è –º–∏–∫—Ä–æ-–∫–æ–ª–µ–±–∞–Ω–∏–π
// üéØ M3/M5/M10+: –∏—Å–ø–æ–ª—å–∑—É–µ–º currentCandleState –∏–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ (—Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
setInterval(() => {
  // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–∏, –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–≤–µ—á–∞
  if (isCreatingNewCandle) {
    return;
  }
  
  subscriptions.forEach((clients, subscriptionKey) => {
    if (clients.size === 0) return;
    
    // –ü–∞—Ä—Å–∏–º "symbol:timeframe"
    const [symbol, timeframe] = subscriptionKey.split(':');
    const generator = getGenerator(symbol, timeframe);
    
    // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏
    if (!generator || !generator.candles || generator.candles.length === 0) {
      logger.warn('websocket', 'Generator not initialized, skipping tick', { symbol, timeframe });
      return;
    }
    
    let updatedCandle;
    
    // üéØ –î–ª—è S5: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–∫—Ä–æ-—Ç–∏–∫–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    if (timeframe === 'S5') {
      updatedCandle = generator.generateCandleTick();
    } 
    // üéØ –î–ª—è M3, M5, M10+: –±–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–≤–µ—á–∏
    else {
      // –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
      if (generator.currentCandleState) {
        updatedCandle = { ...generator.currentCandleState };
      } else if (generator.aggregator && generator.aggregator.currentAggregatedCandle) {
        updatedCandle = { ...generator.aggregator.currentAggregatedCandle };
      } else {
        // Fallback: –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const lastCandle = generator.candles[generator.candles.length - 1];
        if (!lastCandle) return;
        updatedCandle = { ...lastCandle };
      }
    }
    
    // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—á—É –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const validation = generator.validateCandleAnomaly(updatedCandle, 'websocket-tick');
    if (!validation.valid) {
      logger.error('websocket', 'üö® TICK VALIDATION FAILED - skipping send', {
        symbol,
        timeframe,
        reason: validation.reason,
        candle: updatedCandle
      });
      return; // –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ï–ú –∞–Ω–æ–º–∞–ª—å–Ω—ã–π —Ç–∏–∫
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –≤—Ä–µ–º—è - —ç—Ç–æ —á–∏—Å–ª–æ
    if (typeof updatedCandle.time !== 'number' || isNaN(updatedCandle.time)) {
      logger.error('websocket', 'Invalid tick time format', { 
        symbol,
        timeframe,
        candle: updatedCandle
      });
      return;
    }
    
    const message = JSON.stringify({
      type: 'tick',
      symbol,
      timeframe,
      data: updatedCandle
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(message);
      }
    });
  });
}, 250); // –∫–∞–∂–¥—ã–µ 250ms (4 –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É) + –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ = –ø–ª–∞–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–æ—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–µ–π —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
// –í–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ setInterval –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Å–µ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏
function scheduleNextCandleCreation() {
  const CANDLE_INTERVAL = 5000; // 5 —Å–µ–∫—É–Ω–¥
  const now = Date.now();
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–∏ (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Å–µ—Ç–∫–µ)
  const nextCandleTime = Math.ceil(now / CANDLE_INTERVAL) * CANDLE_INTERVAL;
  const delayUntilNextCandle = nextCandleTime - now;
  
  logger.debug('candle-schedule', 'Next candle scheduled', {
    now: now,
    nextCandleTime: nextCandleTime,
    delayMs: delayUntilNextCandle,
    nextCandleDate: new Date(nextCandleTime).toISOString()
  });
  
  setTimeout(() => {
    createNewCandlesForAllSymbols();
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É
    scheduleNextCandleCreation();
  }, delayUntilNextCandle);
}

// üéØ MULTI-TIMEFRAME: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (IQCent style)
function createNewCandlesForAllSymbols() {
  // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–∏–∫–æ–≤
  isCreatingNewCandle = true;
  
  const startTime = Date.now();
  const totalSymbols = Object.keys(SYMBOL_CONFIG).length;
  
  logger.debug('websocket', 'üéØ Creating new S5 candles and aggregating to all timeframes', {
    totalSymbols: totalSymbols,
    subscriptions: subscriptions.size,
    timestamp: startTime
  });
  
  const { TIMEFRAMES } = require('./chartGenerator');
  const timeframeKeys = Object.keys(TIMEFRAMES);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é S5 —Å–≤–µ—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ + –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –≤ –¥—Ä—É–≥–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
  Object.keys(SYMBOL_CONFIG).forEach(symbol => {
    // 1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é S5 —Å–≤–µ—á—É
    const s5Generator = getGenerator(symbol, 'S5');
    
    // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ S5 –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!s5Generator || !s5Generator.candles || s5Generator.candles.length === 0) {
      logger.warn('websocket', 'S5 Generator not initialized, skipping', { symbol });
      return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é S5 —Å–≤–µ—á—É
    const s5Candle = s5Generator.generateNextCandle();
    
    // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø S5 —Å–≤–µ—á–∏
    const s5Validation = s5Generator.validateCandleAnomaly(s5Candle, 'websocket-newCandle');
    if (!s5Validation.valid) {
      logger.error('websocket', 'üö® S5 CANDLE VALIDATION FAILED', {
        symbol,
        reason: s5Validation.reason
      });
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å —Å–∏–º–≤–æ–ª –µ—Å–ª–∏ S5 –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
    }
    
    // 2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º S5 —Å–≤–µ—á—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º S5
    const s5SubscriptionKey = `${symbol}:S5`;
    const s5Clients = subscriptions.get(s5SubscriptionKey);
    if (s5Clients && s5Clients.size > 0) {
      const s5Message = JSON.stringify({
        type: 'newCandle',
        symbol,
        timeframe: 'S5',
        data: s5Candle
      });
      
      s5Clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(s5Message);
        }
      });
      
      logger.debug('websocket', 'S5 candle sent', {
        symbol,
        time: s5Candle.time,
        clientCount: s5Clients.size
      });
    }
    
    // 3Ô∏è‚É£ –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º S5 —Å–≤–µ—á—É –≤–æ –≤—Å–µ –¥—Ä—É–≥–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    timeframeKeys.forEach(timeframe => {
      if (timeframe === 'S5') return; // S5 —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      
      const tfGenerator = getGenerator(symbol, timeframe);
      if (!tfGenerator || !tfGenerator.aggregator) {
        logger.warn('websocket', 'Aggregated generator not initialized', { symbol, timeframe });
        return;
      }
      
      // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º S5 —Å–≤–µ—á—É
      const aggregationResult = tfGenerator.aggregateS5Candle(s5Candle);
      if (!aggregationResult) return;
      
      // –ï—Å–ª–∏ —Å–≤–µ—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
      if (aggregationResult.isNewCandle && aggregationResult.completed) {
        const tfSubscriptionKey = `${symbol}:${timeframe}`;
        const tfClients = subscriptions.get(tfSubscriptionKey);
        
        if (tfClients && tfClients.size > 0) {
          const completedCandle = aggregationResult.completed;
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–≤–µ—á–∏
          const tfValidation = tfGenerator.validateCandleAnomaly(completedCandle, 'aggregated-candle');
          if (!tfValidation.valid) {
            logger.error('websocket', 'üö® AGGREGATED CANDLE VALIDATION FAILED', {
              symbol,
              timeframe,
              reason: tfValidation.reason
            });
            return;
          }
          
          const tfMessage = JSON.stringify({
            type: 'newCandle',
            symbol,
            timeframe,
            data: completedCandle
          });
          
          tfClients.forEach(client => {
            if (client.readyState === WebSocket.OPEN) {
              client.send(tfMessage);
            }
          });
          
          logger.debug('websocket', `${timeframe} candle completed and sent`, {
            symbol,
            timeframe,
            time: completedCandle.time,
            clientCount: tfClients.size
          });
        }
      }
    });
  });
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 200ms –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ç–∞–π–º–∏–Ω–≥–∞
  // –ö–ª–∏–µ–Ω—Ç—ã —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±—ã—Å—Ç—Ä–µ–µ
  setTimeout(() => {
    isCreatingNewCandle = false;
    logger.debug('websocket', 'Tick generation unlocked after new candles', {
      elapsedTime: Date.now() - startTime
    });
  }, 200);
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—á–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ setInterval
scheduleNextCandleCreation();

// ===== –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨ =====

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  logger.info('persistence', 'Auto-saving all generators...');
  const result = saveAllGenerators();
  console.log(`üíæ Auto-save complete: ${result.saved} generators saved, ${result.failed} failed`);
}, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// Graceful shutdown - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
const gracefulShutdown = () => {
  console.log('\nüõë Shutting down gracefully...');
  logger.info('shutdown', 'Graceful shutdown initiated');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
  console.log('üíæ Saving all generators...');
  const result = saveAllGenerators();
  console.log(`‚úÖ Saved ${result.saved} generators`);
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  wss.clients.forEach(client => {
    client.close(1000, 'Server shutting down');
  });
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  server.close(() => {
    console.log('‚úÖ Server closed');
    logger.info('shutdown', 'Server shutdown complete');
    process.exit(0);
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.error('‚ö†Ô∏è  Forced shutdown after timeout');
    process.exit(1);
  }, 10000);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
  logger.error('process', 'Uncaught exception', { 
    error: error.message, 
    stack: error.stack 
  });
  gracefulShutdown();
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
  logger.error('process', 'Unhandled rejection', { 
    reason: String(reason) 
  });
});

server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
  console.log(`WebSocket server is running on ws://localhost:${PORT}/ws/chart`);
});
