// Chart data generator with Geometric Brownian Motion
// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º –±—Ä–æ—É–Ω–æ–≤—Å–∫–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º

const logger = require('./errorLogger');

class ChartGenerator {
    constructor(symbol, basePrice, volatility = 0.002, drift = 0.0, meanReversionSpeed = 0.05) {
        this.symbol = symbol;
        this.basePrice = basePrice;
        this.currentPrice = basePrice;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
        if (basePrice > 10000) {
            volatility = volatility * (1 + Math.log10(basePrice / 10000));
        }
        
        this.volatility = volatility; // –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        this.drift = drift; // –±–∞–∑–æ–≤—ã–π —Ç—Ä–µ–Ω–¥
        this.meanReversionSpeed = meanReversionSpeed; // —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ä–µ–¥–Ω–µ–π
        this.maxCandleChange = 0.015; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —Å–≤–µ—á—É (1.5%)
        this.candles = [];
        
        // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ê–ù–û–ú–ê–õ–ò–ô: –õ–∏–º–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π
        this.MAX_CANDLE_RANGE_PERCENT = 0.025; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö —Å–≤–µ—á–∏ (2.5% –æ—Ç basePrice)
        this.MAX_PRICE_JUMP_PERCENT = 0.02; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∫–∞—á–æ–∫ —Ü–µ–Ω—ã –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏ (2%)
        
        // üåä –°–ò–°–¢–ï–ú–ê –í–û–õ–ù–û–û–ë–†–ê–ó–ù–û–ì–û –î–í–ò–ñ–ï–ù–ò–Ø
        this.currentDrift = 0.0; // —Ç–µ–∫—É—â–∏–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–¥ (–∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º)
        this.trendChangeCounter = 0; // —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–∞
        this.trendChangePeriod = this.randomInt(30, 80); // –º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–¥ –∫–∞–∂–¥—ã–µ 30-80 —Å–≤–µ—á–µ–π
        this.trendStrength = 0.0002; // —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ª–Ω)
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º (Box-Muller)
    randomNormal(mean = 0, stdDev = 1) {
        const u1 = Math.random();
        const u2 = Math.random();
        const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
        return mean + z0 * stdDev;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [min, max]
    randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // üåä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    updateTrend() {
        this.trendChangeCounter++;
        
        // –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–¥?
        if (this.trendChangeCounter >= this.trendChangePeriod) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Ö–æ–¥—è—â–∏–º, –Ω–∏—Å—Ö–æ–¥—è—â–∏–º –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º)
            const trendType = Math.random();
            
            if (trendType < 0.35) {
                // –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (35%)
                this.currentDrift = this.trendStrength * this.randomNormal(1.0, 0.3);
            } else if (trendType < 0.70) {
                // –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (35%)
                this.currentDrift = -this.trendStrength * this.randomNormal(1.0, 0.3);
            } else {
                // –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (30%)
                this.currentDrift = this.trendStrength * this.randomNormal(0, 0.5);
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
            this.trendChangeCounter = 0;
            this.trendChangePeriod = this.randomInt(30, 80);
            
            logger.debug('trend', 'Trend changed', {
                symbol: this.symbol,
                newDrift: this.currentDrift,
                nextChangePeriod: this.trendChangePeriod
            });
        } else {
            // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º)
            this.currentDrift += this.randomNormal(0, this.trendStrength * 0.1);
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ —á—Ç–æ–±—ã –æ–Ω –Ω–µ —É–ª–µ—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            this.currentDrift = Math.max(-this.trendStrength * 2, Math.min(this.trendStrength * 2, this.currentDrift));
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º mean-reversion –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
    generateNextPrice(currentPrice) {
        // üåä –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –¥–ª—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        this.updateTrend();
        
        // Mean reversion: —Ü–µ–Ω–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–∞–∑–æ–≤–æ–π (–æ—Å–ª–∞–±–ª–µ–Ω –¥–ª—è –±–æ–ª–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–∏–ª—É: —Å–ª–∞–±–µ–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–æ, —Å–∏–ª—å–Ω–µ–µ –∫–æ–≥–¥–∞ –¥–∞–ª–µ–∫–æ
        const deviation = Math.abs(currentPrice - this.basePrice) / this.basePrice;
        const adaptiveMeanReversion = this.meanReversionSpeed * Math.pow(deviation * 10, 1.5);
        const meanReversionForce = (this.basePrice - currentPrice) * adaptiveMeanReversion;
        
        // Geometric Brownian Motion —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–Ω–¥–æ–º
        const randomShock = this.randomNormal(0, this.volatility);
        const priceChange = this.currentDrift + meanReversionForce + randomShock;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const limitedChange = Math.max(-this.maxCandleChange, Math.min(this.maxCandleChange, priceChange));
        
        let newPrice = currentPrice * (1 + limitedChange);
        
        // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ü–µ–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        newPrice = Math.max(newPrice, this.basePrice * 0.9);
        newPrice = Math.min(newPrice, this.basePrice * 1.1);
        
        return newPrice;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
    getPricePrecision(price) {
        if (price >= 10000) return 1;     // –ù–∞–ø—Ä–∏–º–µ—Ä UAH_USD_OTC: 68623.2
        if (price >= 1000) return 2;      // –ù–∞–ø—Ä–∏–º–µ—Ä BTC: 68750.23
        if (price >= 100) return 3;       // –ù–∞–ø—Ä–∏–º–µ—Ä ETH: 3450.123
        if (price >= 10) return 4;        // –ù–∞–ø—Ä–∏–º–µ—Ä USD/MXN: 18.9167
        if (price >= 1) return 4;         // –ù–∞–ø—Ä–∏–º–µ—Ä EUR/USD: 1.0850
        if (price >= 0.1) return 5;       // –ù–∞–ø—Ä–∏–º–µ—Ä DOGE: 0.14523
        if (price >= 0.01) return 6;      // –ù–∞–ø—Ä–∏–º–µ—Ä –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–∞—Ä—ã
        return 8;                          // –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ü–µ–Ω
    }

    // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –°–í–ï–ß–ò –ù–ê –ê–ù–û–ú–ê–õ–ò–ò
    validateCandleAnomaly(candle, context = 'unknown') {
        if (!candle) {
            logger.error('validation', 'Candle is null', { symbol: this.symbol, context });
            return { valid: false, reason: 'Null candle' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–∞—Ö–∞ —Å–≤–µ—á–∏ (high - low)
        const candleRange = candle.high - candle.low;
        const rangePercent = candleRange / this.basePrice;
        
        if (rangePercent > this.MAX_CANDLE_RANGE_PERCENT) {
            logger.error('validation', 'üö® BACKEND ANOMALY: Candle range too large!', {
                symbol: this.symbol,
                context,
                candleRange: candleRange.toFixed(4),
                rangePercent: (rangePercent * 100).toFixed(2) + '%',
                maxAllowed: (this.MAX_CANDLE_RANGE_PERCENT * 100).toFixed(2) + '%',
                basePrice: this.basePrice,
                candle: {
                    time: candle.time,
                    open: candle.open,
                    high: candle.high,
                    low: candle.low,
                    close: candle.close
                }
            });
            console.error(`üö® ANOMALY: ${this.symbol} - range ${(rangePercent * 100).toFixed(2)}% exceeds limit`);
            
            return { 
                valid: false, 
                reason: 'Range too large',
                rangePercent,
                maxAllowed: this.MAX_CANDLE_RANGE_PERCENT
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ OHLC –ª–æ–≥–∏–∫–∏
        if (candle.high < candle.low || 
            candle.high < candle.open || 
            candle.high < candle.close ||
            candle.low > candle.open ||
            candle.low > candle.close) {
            logger.error('validation', 'OHLC logic violation', {
                symbol: this.symbol,
                context,
                candle
            });
            return { valid: false, reason: 'OHLC violation' };
        }
        
        return { valid: true };
    }
    
    // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –°–ö–ê–ß–ö–ê –¶–ï–ù–´ –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
    validatePriceJump(previousCandle, newCandle) {
        if (!previousCandle || !newCandle) {
            return { valid: true }; // –ù–µ—á–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        }
        
        const priceDiff = Math.abs(newCandle.open - previousCandle.close);
        const jumpPercent = priceDiff / this.basePrice;
        
        if (jumpPercent > this.MAX_PRICE_JUMP_PERCENT) {
            logger.error('validation', 'üö® BACKEND ANOMALY: Price jump too large!', {
                symbol: this.symbol,
                previousClose: previousCandle.close,
                newOpen: newCandle.open,
                difference: priceDiff.toFixed(4),
                jumpPercent: (jumpPercent * 100).toFixed(2) + '%',
                maxAllowed: (this.MAX_PRICE_JUMP_PERCENT * 100).toFixed(2) + '%',
                basePrice: this.basePrice
            });
            
            return {
                valid: false,
                reason: 'Price jump too large',
                jumpPercent,
                maxAllowed: this.MAX_PRICE_JUMP_PERCENT
            };
        }
        
        return { valid: true };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å–≤–µ—á–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º OHLC
    generateCandle(timestamp, openPrice) {
        const close = this.generateNextPrice(openPrice);
        
        // üìè –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å–≤–µ—á–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–≤–µ—á–µ–π –∫–∞–∫ –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–∞—Ö
        const intraVolatility = this.volatility * 0.12; // —Å–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–∞ —Å 0.4 –¥–æ 0.12 –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
        
        // High –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ open –∏ close
        const maxPrice = Math.max(openPrice, close);
        const high = maxPrice * (1 + Math.abs(this.randomNormal(0, intraVolatility)));
        
        // Low –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ open –∏ close
        const minPrice = Math.min(openPrice, close);
        const low = minPrice * (1 - Math.abs(this.randomNormal(0, intraVolatility)));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–º (—Å–ª—É—á–∞–π–Ω—ã–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ)
        const baseVolume = 10000;
        const volumeVariance = 0.5;
        const volume = Math.floor(baseVolume * (1 + this.randomNormal(0, volumeVariance)));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–∞
        const precision = this.getPricePrecision(this.basePrice);
        
        const candle = {
            time: Math.floor(timestamp / 1000), // –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è lightweight-charts
            open: parseFloat(openPrice.toFixed(precision)),
            high: parseFloat(high.toFixed(precision)),
            low: parseFloat(low.toFixed(precision)),
            close: parseFloat(close.toFixed(precision)),
            volume: Math.max(1000, volume)
        };
        
        // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—á—É –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        const validation = this.validateCandleAnomaly(candle, 'generateCandle');
        if (!validation.valid) {
            // –ï—Å–ª–∏ —Å–≤–µ—á–∞ –∞–Ω–æ–º–∞–ª—å–Ω–∞—è - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ—ë —Ä–∞–∑–º–µ—Ä
            logger.warn('validation', 'Limiting anomalous candle', {
                symbol: this.symbol,
                reason: validation.reason,
                originalCandle: { ...candle }
            });
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º high –∏ low –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            const maxAllowedRange = this.basePrice * this.MAX_CANDLE_RANGE_PERCENT;
            const midPrice = (candle.open + candle.close) / 2;
            
            candle.high = Math.min(candle.high, midPrice + maxAllowedRange / 2);
            candle.low = Math.max(candle.low, midPrice - maxAllowedRange / 2);
            
            // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ high >= open, close –∏ low <= open, close
            candle.high = Math.max(candle.high, candle.open, candle.close);
            candle.low = Math.min(candle.low, candle.open, candle.close);
            
            logger.info('validation', 'Candle limited successfully', {
                symbol: this.symbol,
                limitedCandle: candle
            });
        }
        
        return candle;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ 3 –¥–Ω—è —Å —à–∞–≥–æ–º 5 —Å–µ–∫—É–Ω–¥
    generateHistoricalData(days = 3, intervalSeconds = 5) {
        const candles = [];
        const now = Date.now();
        
        // –í–ê–ñ–ù–û: –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ —Å–µ—Ç–∫–µ intervalSeconds
        const currentTimeSeconds = Math.floor(now / 1000);
        const alignedCurrentTime = Math.floor(currentTimeSeconds / intervalSeconds) * intervalSeconds;
        const alignedNow = alignedCurrentTime * 1000;
        
        const startTime = alignedNow - (days * 24 * 60 * 60 * 1000); // N –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        const totalCandles = Math.floor((alignedNow - startTime) / (intervalSeconds * 1000));
        
        let currentPrice = this.basePrice;
        
        for (let i = 0; i < totalCandles; i++) {
            const timestamp = startTime + (i * intervalSeconds * 1000);
            const candle = this.generateCandle(timestamp, currentPrice);
            candles.push(candle);
            currentPrice = candle.close; // —Å–ª–µ–¥—É—é—â–∞—è —Å–≤–µ—á–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å close –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        }
        
        this.candles = candles;
        this.currentPrice = currentPrice;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º currentCandleState –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        if (candles.length > 0) {
            const lastCandle = candles[candles.length - 1];
            this.currentCandleState = {
                time: lastCandle.time,
                open: lastCandle.open,
                high: lastCandle.high,
                low: lastCandle.low,
                close: lastCandle.close,
                volume: lastCandle.volume,
                targetClose: lastCandle.close,
                targetHigh: lastCandle.high,
                targetLow: lastCandle.low
            };
        }
        
        logger.info('historical', 'Historical data generated', {
            symbol: this.symbol,
            totalCandles: candles.length,
            lastCandleTime: candles[candles.length - 1]?.time,
            alignedCurrentTime: alignedCurrentTime,
            intervalSeconds: intervalSeconds,
            currentCandleStateInitialized: !!this.currentCandleState
        });
        
        return candles;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    generateNextCandle() {
        const now = Date.now();
        const precision = this.getPricePrecision(this.basePrice);
        const intervalSeconds = 5; // –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏
        
        // –ù–æ–≤–∞—è —Å–≤–µ—á–∞ –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
        const openPrice = this.currentPrice;
        
        // –†–ï–®–ï–ù–ò–ï #1: –ù–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ Date.now() –¥–ª—è timestamp, –∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–±–∏—Ä–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ setInterval
        let timestamp;
        if (this.candles.length > 0) {
            const lastCandle = this.candles[this.candles.length - 1];
            // –í–°–ï–ì–î–ê —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ timestamp —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            timestamp = lastCandle.time + intervalSeconds;
            
            logger.debug('candle', 'Calculated timestamp from last candle', { 
                symbol: this.symbol,
                lastTime: lastCandle.time,
                newTime: timestamp,
                intervalSeconds: intervalSeconds
            });
        } else {
            // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Å–µ—Ç–∫–µ
            const currentTimeSeconds = Math.floor(now / 1000);
            timestamp = Math.floor(currentTimeSeconds / intervalSeconds) * intervalSeconds;
            
            logger.debug('candle', 'First candle - aligned to grid', { 
                symbol: this.symbol,
                timestamp: timestamp
            });
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å–≤–µ—á—É —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π —Å—Ä–∞–∑—É
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ generateCandle() –≤–º–µ—Å—Ç–æ –ø–ª–æ—Å–∫–æ–π —Å–≤–µ—á–∏
        const candle = this.generateCandle(timestamp * 1000, openPrice);
        
        // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∞—á–æ–∫ —Ü–µ–Ω—ã –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
        if (this.candles.length > 0) {
            const previousCandle = this.candles[this.candles.length - 1];
            const jumpValidation = this.validatePriceJump(previousCandle, candle);
            
            if (!jumpValidation.valid) {
                // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º open –Ω–æ–≤–æ–π —Å–≤–µ—á–∏ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–∫–∞—á–æ–∫
                logger.warn('validation', 'Correcting price jump', {
                    symbol: this.symbol,
                    originalOpen: candle.open,
                    previousClose: previousCandle.close
                });
                
                candle.open = previousCandle.close;
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º high –∏ low —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ open
                candle.high = Math.max(candle.high, candle.open, candle.close);
                candle.low = Math.min(candle.low, candle.open, candle.close);
                
                logger.info('validation', 'Price jump corrected', {
                    symbol: this.symbol,
                    correctedOpen: candle.open
                });
            }
        }
        
        this.candles.push(candle);
        
        // –°–ö–û–õ–¨–ó–Ø–©–ï–ï –û–ö–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)
        // 3 –¥–Ω—è = 51,840 —Å–≤–µ—á–µ–π. –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 52,000 -> –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 51,500
        const TRIM_THRESHOLD = 52000;
        const KEEP_CANDLES = 51500;
        
        if (this.candles.length > TRIM_THRESHOLD) {
            const toRemove = this.candles.length - KEEP_CANDLES;
            const beforeTrim = this.candles[this.candles.length - 1]; // –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –¥–æ –æ–±—Ä–µ–∑–∫–∏
            this.candles = this.candles.slice(toRemove);
            const afterTrim = this.candles[this.candles.length - 1]; // –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
            
            // üîß –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–µ–∑–∫–∞ –Ω–µ –Ω–∞—Ä—É—à–∏–ª–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å
            if (beforeTrim.time !== afterTrim.time) {
                logger.error('memory', 'TRIM CHANGED LAST CANDLE!', {
                    symbol: this.symbol,
                    beforeTime: beforeTrim.time,
                    afterTime: afterTrim.time,
                    beforeClose: beforeTrim.close,
                    afterClose: afterTrim.close
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º currentPrice –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
            this.currentPrice = afterTrim.close;
            
            logger.info('memory', 'Candle memory trimmed (sliding window)', {
                symbol: this.symbol,
                removed: toRemove,
                remaining: this.candles.length,
                threshold: TRIM_THRESHOLD,
                keepCandles: KEEP_CANDLES,
                lastCandleClose: afterTrim.close,
                currentPrice: this.currentPrice
            });
        }
        
        // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º currentPrice –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
        // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è —Å–≤–µ—á–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å close —Ç–µ–∫—É—â–µ–π
        this.currentPrice = candle.close;
        
        logger.debug('candle', 'currentPrice updated after new candle', {
            symbol: this.symbol,
            newCurrentPrice: this.currentPrice,
            candleClose: candle.close,
            candleOpen: candle.open
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ –ø–æ–∑–≤–æ–ª—è–µ–º —Ç–∏–∫–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–µ—á—É
        this.currentCandleState = {
            time: candle.time,
            open: candle.open,
            high: candle.high,
            low: candle.low,
            close: candle.close,
            volume: candle.volume,
            targetClose: candle.close,
            targetHigh: candle.high,
            targetLow: candle.low
        };
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if (typeof candle.time !== 'number' || isNaN(candle.time)) {
            logger.error('candle', 'Invalid new candle time detected', { 
                symbol: this.symbol,
                candle: candle
            });
            candle.time = Math.floor(Date.now() / 1000);
        }
        
        // –†–ï–®–ï–ù–ò–ï #5: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger.logCandle('New candle sent to clients', this.symbol, candle);
        logger.debug('candle', 'Candle creation details', {
            symbol: this.symbol,
            time: candle.time,
            timeISO: new Date(candle.time * 1000).toISOString(),
            open: candle.open,
            close: candle.close,
            totalCandles: this.candles.length,
            previousCandleTime: this.candles.length > 1 ? this.candles[this.candles.length - 2].time : null,
            timeDiff: this.candles.length > 1 ? candle.time - this.candles[this.candles.length - 2].time : null
        });
        
        return candle;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ (—Ç–∏–∫–∞)
    generateCandleTick() {
        if (!this.currentCandleState) {
            // –ï—Å–ª–∏ —Å–≤–µ—á–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é
            return this.generateNextCandle();
        }
        
        // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ currentCandleState —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–æ–π
        if (this.candles.length > 0) {
            const lastCandle = this.candles[this.candles.length - 1];
            if (this.currentCandleState.time !== lastCandle.time) {
                logger.warn('candle', 'currentCandleState out of sync - resetting', {
                    symbol: this.symbol,
                    currentStateTime: this.currentCandleState.time,
                    lastCandleTime: lastCandle.time,
                    timeDiff: lastCandle.time - this.currentCandleState.time
                });
                // –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–æ–π
                this.currentCandleState = {
                    time: lastCandle.time,
                    open: lastCandle.open,
                    high: lastCandle.high,
                    low: lastCandle.low,
                    close: lastCandle.close,
                    volume: lastCandle.volume,
                    targetClose: lastCandle.close,
                    targetHigh: lastCandle.high,
                    targetLow: lastCandle.low
                };
            }
        }
        
        const precision = this.getPricePrecision(this.basePrice);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        const microVolatility = this.volatility * 0.3; // –º–µ–Ω—å—à–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        
        // Mean reversion –¥–ª—è —Ç–∏–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–∏–ª—É
        const deviation = Math.abs(this.currentCandleState.targetClose - this.basePrice) / this.basePrice;
        const adaptiveMeanReversion = this.meanReversionSpeed * Math.pow(deviation * 10, 1.5);
        const meanReversionForce = (this.basePrice - this.currentCandleState.targetClose) * adaptiveMeanReversion;
        const priceChange = this.randomNormal(0, microVolatility) + meanReversionForce + this.currentDrift * 0.5;
        
        // –ù–æ–≤–∞—è —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ close
        let newTargetClose = this.currentCandleState.targetClose * (1 + priceChange);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ
        const maxChange = this.basePrice * 0.001; // 0.1% –∑–∞ —Ç–∏–∫
        newTargetClose = Math.max(
            this.currentCandleState.targetClose - maxChange,
            Math.min(this.currentCandleState.targetClose + maxChange, newTargetClose)
        );
        
        // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ü–µ–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        newTargetClose = Math.max(newTargetClose, this.basePrice * 0.9);
        newTargetClose = Math.min(newTargetClose, this.basePrice * 1.1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentCandleState.targetClose = newTargetClose;
        this.currentCandleState.close = parseFloat(newTargetClose.toFixed(precision));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º currentPrice –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
        this.currentPrice = this.currentCandleState.close;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º high –∏ low –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if (this.currentCandleState.close > this.currentCandleState.high) {
            this.currentCandleState.high = this.currentCandleState.close;
            this.currentCandleState.targetHigh = this.currentCandleState.close;
        } else {
            // üìè –†–µ–¥–∫–∏–µ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–∏—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ –∫–∞–∫ –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–∞—Ö
            if (Math.random() < 0.015) { // —É–º–µ–Ω—å—à–µ–Ω–æ —Å 4% –¥–æ 1.5%
                const wickHigh = this.currentCandleState.close * (1 + Math.abs(this.randomNormal(0, microVolatility * 0.08))); // —É–º–µ–Ω—å—à–µ–Ω–æ —Å 0.2 –¥–æ 0.08
                if (wickHigh > this.currentCandleState.high && wickHigh <= this.basePrice * 1.1) {
                    this.currentCandleState.high = parseFloat(wickHigh.toFixed(precision));
                    this.currentCandleState.targetHigh = wickHigh;
                }
            }
        }
        
        if (this.currentCandleState.close < this.currentCandleState.low) {
            this.currentCandleState.low = this.currentCandleState.close;
            this.currentCandleState.targetLow = this.currentCandleState.close;
        } else {
            // üìè –†–µ–¥–∫–∏–µ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–∏—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ –∫–∞–∫ –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–∞—Ö
            if (Math.random() < 0.015) { // —É–º–µ–Ω—å—à–µ–Ω–æ —Å 4% –¥–æ 1.5%
                const wickLow = this.currentCandleState.close * (1 - Math.abs(this.randomNormal(0, microVolatility * 0.08))); // —É–º–µ–Ω—å—à–µ–Ω–æ —Å 0.2 –¥–æ 0.08
                if (wickLow < this.currentCandleState.low && wickLow >= this.basePrice * 0.9) {
                    this.currentCandleState.low = parseFloat(wickLow.toFixed(precision));
                    this.currentCandleState.targetLow = wickLow;
                }
            }
        }
        
        // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—ä–µ–º
        this.currentCandleState.volume += Math.floor(Math.random() * 100);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –≤ –º–∞—Å—Å–∏–≤–µ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!
        if (this.candles.length > 0) {
            const lastCandle = this.candles[this.candles.length - 1];
            if (lastCandle.time === this.currentCandleState.time) {
                lastCandle.close = this.currentCandleState.close;
                lastCandle.high = this.currentCandleState.high;
                lastCandle.low = this.currentCandleState.low;
                lastCandle.volume = this.currentCandleState.volume;
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —è–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
        const tickCandle = {
            time: this.currentCandleState.time,
            open: this.currentCandleState.open,
            high: this.currentCandleState.high,
            low: this.currentCandleState.low,
            close: this.currentCandleState.close,
            volume: this.currentCandleState.volume
        };
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏
        if (typeof tickCandle.time !== 'number' || isNaN(tickCandle.time) ||
            typeof tickCandle.open !== 'number' || isNaN(tickCandle.open) ||
            typeof tickCandle.high !== 'number' || isNaN(tickCandle.high) ||
            typeof tickCandle.low !== 'number' || isNaN(tickCandle.low) ||
            typeof tickCandle.close !== 'number' || isNaN(tickCandle.close)) {
            logger.error('candle', 'Invalid tick candle data detected', { 
                symbol: this.symbol,
                tickCandle: tickCandle,
                currentState: this.currentCandleState
            });
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é –±–µ–∑ NaN
            return {
                time: this.currentCandleState.time || Math.floor(Date.now() / 1000),
                open: this.currentCandleState.open || this.basePrice,
                high: this.currentCandleState.high || this.basePrice,
                low: this.currentCandleState.low || this.basePrice,
                close: this.currentCandleState.close || this.basePrice,
                volume: this.currentCandleState.volume || 1000
            };
        }
        
        return tickCandle;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    getHistoricalData(from, to) {
        if (this.candles.length === 0) {
            this.generateHistoricalData();
        }
        
        if (!from && !to) {
            return this.candles;
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
        return this.candles.filter(candle => {
            const time = candle.time;
            const matchFrom = !from || time >= from;
            const matchTo = !to || time <= to;
            return matchFrom && matchTo;
        });
    }

    // –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 1000 —Å–≤–µ—á–µ–π –Ω–∞ –¥–∏—Å–∫
    toJSON() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–≤–µ—á–µ–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        const SAVE_LAST_N = 1000;
        const candlesToSave = this.candles.slice(-SAVE_LAST_N);
        
        return {
            symbol: this.symbol,
            basePrice: this.basePrice,
            currentPrice: this.currentPrice,
            volatility: this.volatility,
            drift: this.drift,
            meanReversionSpeed: this.meanReversionSpeed,
            candles: candlesToSave,
            currentCandleState: this.currentCandleState,
            // üåä –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
            currentDrift: this.currentDrift,
            trendChangeCounter: this.trendChangeCounter,
            trendChangePeriod: this.trendChangePeriod,
            trendStrength: this.trendStrength,
            savedAt: Date.now(),
            savedCandleCount: candlesToSave.length
        };
    }

    // –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    fromJSON(data) {
        if (!data || !data.candles || data.candles.length === 0) {
            logger.warn('persistence', 'No valid data to restore', { symbol: this.symbol });
            return false;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentPrice = data.currentPrice || this.basePrice;
        this.currentCandleState = data.currentCandleState || null;
        
        // üåä –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        if (typeof data.currentDrift === 'number') {
            this.currentDrift = data.currentDrift;
        }
        if (typeof data.trendChangeCounter === 'number') {
            this.trendChangeCounter = data.trendChangeCounter;
        }
        if (typeof data.trendChangePeriod === 'number') {
            this.trendChangePeriod = data.trendChangePeriod;
        }
        if (typeof data.trendStrength === 'number') {
            this.trendStrength = data.trendStrength;
        }
        
        logger.info('persistence', 'Trend state restored', {
            symbol: this.symbol,
            currentDrift: this.currentDrift,
            trendChangeCounter: this.trendChangeCounter,
            trendChangePeriod: this.trendChangePeriod
        });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –¥–Ω—è –∏—Å—Ç–æ—Ä–∏–∏
        this.generateHistoricalData();
        
        // –¢–µ–ø–µ—Ä—å –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Å–≤–µ—á–∞–º–∏
        const savedCandles = data.candles;
        const lastSavedCandle = savedCandles[savedCandles.length - 1];
        const lastGeneratedCandle = this.candles[this.candles.length - 1];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞–∑—Ä—ã–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        const timeDiff = lastSavedCandle.time - lastGeneratedCandle.time;
        
        if (timeDiff > 0) {
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –Ω–æ–≤–µ–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            logger.info('persistence', 'Merging saved candles with generated history', {
                symbol: this.symbol,
                generatedCount: this.candles.length,
                savedCount: savedCandles.length,
                timeDiff: timeDiff,
                lastGeneratedTime: lastGeneratedCandle.time,
                lastSavedTime: lastSavedCandle.time
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–æ–≤–µ–µ —á–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            const newCandles = savedCandles.filter(c => c.time > lastGeneratedCandle.time);
            this.candles.push(...newCandles);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º currentPrice –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            if (newCandles.length > 0) {
                this.currentPrice = newCandles[newCandles.length - 1].close;
            }
        } else {
            logger.info('persistence', 'Saved data is older than generated, using generated', {
                symbol: this.symbol,
                timeDiff: timeDiff
            });
        }
        
        logger.info('persistence', 'Data restored successfully', {
            symbol: this.symbol,
            totalCandles: this.candles.length,
            currentPrice: this.currentPrice
        });
        
        return true;
    }
}

// Singleton –∏–Ω—Å—Ç–∞–Ω—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
const generators = new Map();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
const SYMBOL_CONFIG = {
            // üåä Currencies - –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π mean reversion –¥–ª—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
            'USD_MXN_OTC': { basePrice: 18.9167, volatility: 0.002, drift: 0.0, meanReversionSpeed: 0.008 },
            'EUR_USD_OTC': { basePrice: 1.0850, volatility: 0.0015, drift: 0.0, meanReversionSpeed: 0.008 },
            'GBP_USD_OTC': { basePrice: 1.2650, volatility: 0.0018, drift: 0.0, meanReversionSpeed: 0.008 },
            'USD_CAD': { basePrice: 1.3550, volatility: 0.0016, drift: 0.0, meanReversionSpeed: 0.008 },
            'AUD_CAD_OTC': { basePrice: 0.8820, volatility: 0.0019, drift: 0.0, meanReversionSpeed: 0.008 },
            'BHD_CNY_OTC': { basePrice: 18.6500, volatility: 0.0017, drift: 0.0, meanReversionSpeed: 0.008 },
            'EUR_CHF_OTC': { basePrice: 0.9420, volatility: 0.0014, drift: 0.0, meanReversionSpeed: 0.008 },
            'EUR_CHF_OTC2': { basePrice: 0.9425, volatility: 0.0014, drift: 0.0, meanReversionSpeed: 0.008 },
            'KES_USD_OTC': { basePrice: 0.0077, volatility: 0.0020, drift: 0.0, meanReversionSpeed: 0.008 },
            'TND_USD_OTC': { basePrice: 0.3190, volatility: 0.0018, drift: 0.0, meanReversionSpeed: 0.008 },
            'UAH_USD_OTC': { basePrice: 68623.2282, volatility: 0.008, drift: 0.0, meanReversionSpeed: 0.006 },
            'USD_BDT_OTC': { basePrice: 0.0092, volatility: 0.0019, drift: 0.0, meanReversionSpeed: 0.008 },
            'USD_CNH_OTC': { basePrice: 7.2450, volatility: 0.0016, drift: 0.0, meanReversionSpeed: 0.008 },
            'USD_IDR_OTC': { basePrice: 15850, volatility: 0.007, drift: 0.0, meanReversionSpeed: 0.006 },
            'USD_MYR_OTC': { basePrice: 4.4650, volatility: 0.0017, drift: 0.0, meanReversionSpeed: 0.008 },
            'AUD_NZD_OTC': { basePrice: 1.0920, volatility: 0.0016, drift: 0.0, meanReversionSpeed: 0.008 },
            'USD_PHP_OTC': { basePrice: 0.0178, volatility: 0.0019, drift: 0.0, meanReversionSpeed: 0.008 },
            'ZAR_USD_OTC': { basePrice: 0.0548, volatility: 0.0021, drift: 0.0, meanReversionSpeed: 0.008 },
            'YER_USD_OTC': { basePrice: 0.0040, volatility: 0.0022, drift: 0.0, meanReversionSpeed: 0.008 },
            'USD_BRL_OTC': { basePrice: 5.6250, volatility: 0.0019, drift: 0.0, meanReversionSpeed: 0.008 },
            'USD_EGP_OTC': { basePrice: 0.0204, volatility: 0.0023, drift: 0.0, meanReversionSpeed: 0.008 },
            'OMR_CNY_OTC': { basePrice: 18.3500, volatility: 0.0016, drift: 0.0, meanReversionSpeed: 0.008 },
            'AUD_JPY_OTC': { basePrice: 96.850, volatility: 0.007, drift: 0.0, meanReversionSpeed: 0.006 },
            'EUR_GBP_OTC': { basePrice: 0.8580, volatility: 0.0015, drift: 0.0, meanReversionSpeed: 0.008 },
            'EUR_HUF_OTC': { basePrice: 393.50, volatility: 0.008, drift: 0.0, meanReversionSpeed: 0.006 },
            'EUR_TRY_OTC': { basePrice: 37.250, volatility: 0.0024, drift: 0.0, meanReversionSpeed: 0.008 },
            'USD_JPY_OTC': { basePrice: 149.850, volatility: 0.007, drift: 0.0, meanReversionSpeed: 0.006 },
            'USD_CHF_OTC': { basePrice: 0.8690, volatility: 0.0015, drift: 0.0, meanReversionSpeed: 0.008 },
            'AUD_CHF': { basePrice: 0.5820, volatility: 0.0016, drift: 0.0, meanReversionSpeed: 0.008 },
            'CHF_JPY': { basePrice: 172.450, volatility: 0.007, drift: 0.0, meanReversionSpeed: 0.006 },
            'EUR_AUD': { basePrice: 1.6350, volatility: 0.0017, drift: 0.0, meanReversionSpeed: 0.008 },
            'EUR_CHF': { basePrice: 0.9435, volatility: 0.0014, drift: 0.0, meanReversionSpeed: 0.008 },
            'EUR_GBP': { basePrice: 0.8575, volatility: 0.0015, drift: 0.0, meanReversionSpeed: 0.008 },
            'EUR_JPY': { basePrice: 162.650, volatility: 0.007, drift: 0.0, meanReversionSpeed: 0.006 },
            'EUR_USD': { basePrice: 1.0855, volatility: 0.0016, drift: 0.0, meanReversionSpeed: 0.008 },
            'GBP_CAD': { basePrice: 1.7150, volatility: 0.0018, drift: 0.0, meanReversionSpeed: 0.008 },
            'GBP_CHF': { basePrice: 1.1020, volatility: 0.0017, drift: 0.0, meanReversionSpeed: 0.008 },
            'GBP_USD': { basePrice: 1.2655, volatility: 0.0017, drift: 0.0, meanReversionSpeed: 0.008 },
            
            // Cryptocurrencies - –µ—â–µ —Å–ª–∞–±–µ–µ mean reversion –¥–ª—è –±–æ–ª–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Å –≤–æ–ª–Ω–∞–º–∏
            'BTC': { basePrice: 68500, volatility: 0.012, drift: 0.0, meanReversionSpeed: 0.001 },
            'BTC_OTC': { basePrice: 68750, volatility: 0.012, drift: 0.0, meanReversionSpeed: 0.001 },
            'BTC_ETF_OTC': { basePrice: 68600, volatility: 0.012, drift: 0.0, meanReversionSpeed: 0.001 },
            'ETH_OTC': { basePrice: 3450, volatility: 0.014, drift: 0.0, meanReversionSpeed: 0.001 },
            'TEST_TEST1': { basePrice: 125.50, volatility: 0.0035, drift: 0.0, meanReversionSpeed: 0.002 },
            'BNB_OTC': { basePrice: 585, volatility: 0.013, drift: 0.0, meanReversionSpeed: 0.001 },
            'SOL_OTC': { basePrice: 168, volatility: 0.015, drift: 0.0, meanReversionSpeed: 0.001 },
            'ADA_OTC': { basePrice: 0.58, volatility: 0.0036, drift: 0.0, meanReversionSpeed: 0.002 },
            'DOGE_OTC': { basePrice: 0.14, volatility: 0.0040, drift: 0.0, meanReversionSpeed: 0.002 },
            'DOT_OTC': { basePrice: 7.2, volatility: 0.0034, drift: 0.0, meanReversionSpeed: 0.002 },
            'MATIC_OTC': { basePrice: 0.78, volatility: 0.0037, drift: 0.0, meanReversionSpeed: 0.002 },
            'LTC_OTC': { basePrice: 85, volatility: 0.013, drift: 0.0, meanReversionSpeed: 0.001 },
            'LINK_OTC': { basePrice: 15.8, volatility: 0.0034, drift: 0.0, meanReversionSpeed: 0.002 },
            'AVAX_OTC': { basePrice: 38.5, volatility: 0.0039, drift: 0.0, meanReversionSpeed: 0.002 },
            'TRX_OTC': { basePrice: 0.168, volatility: 0.0032, drift: 0.0, meanReversionSpeed: 0.002 },
            'TON_OTC': { basePrice: 5.6, volatility: 0.0036, drift: 0.0, meanReversionSpeed: 0.002 },
            
            // Commodities - –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π mean reversion –¥–ª—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
            'GOLD_OTC': { basePrice: 2650, volatility: 0.008, drift: 0.0, meanReversionSpeed: 0.006 },
            'SILVER_OTC': { basePrice: 31.5, volatility: 0.0022, drift: 0.0, meanReversionSpeed: 0.008 },
            'BRENT_OTC': { basePrice: 87.5, volatility: 0.010, drift: 0.0, meanReversionSpeed: 0.006 },
            'WTI_OTC': { basePrice: 83.8, volatility: 0.010, drift: 0.0, meanReversionSpeed: 0.006 },
            'NATGAS_OTC': { basePrice: 3.2, volatility: 0.0028, drift: 0.0, meanReversionSpeed: 0.008 },
            'PALLADIUM_OTC': { basePrice: 1050, volatility: 0.009, drift: 0.0, meanReversionSpeed: 0.006 },
            'PLATINUM_OTC': { basePrice: 980, volatility: 0.009, drift: 0.0, meanReversionSpeed: 0.006 }
};

function getGenerator(symbol) {
    if (!generators.has(symbol)) {
        const symbolConfig = SYMBOL_CONFIG[symbol] || { basePrice: 100, volatility: 0.002, drift: 0.0 };
        const generator = new ChartGenerator(
            symbol,
            symbolConfig.basePrice,
            symbolConfig.volatility,
            symbolConfig.drift,
            symbolConfig.meanReversionSpeed // –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π 0.05
        );
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –î–û –ø–µ—Ä–≤—ã—Ö —Ç–∏–∫–æ–≤
        generator.generateHistoricalData();
        
        logger.info('generator', 'New generator created and initialized', {
            symbol: symbol,
            candleCount: generator.candles.length,
            basePrice: symbolConfig.basePrice
        });
        
        generators.set(symbol, generator);
    }
    return generators.get(symbol);
}

// –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –¥–∏—Å–∫
const fs = require('fs');
const path = require('path');

const DATA_DIR = path.join(__dirname, '..', 'data');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
function ensureDataDir() {
    if (!fs.existsSync(DATA_DIR)) {
        fs.mkdirSync(DATA_DIR, { recursive: true });
        logger.info('persistence', 'Data directory created', { path: DATA_DIR });
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
function saveGenerator(symbol) {
    try {
        ensureDataDir();
        
        const generator = generators.get(symbol);
        if (!generator) {
            logger.warn('persistence', 'Generator not found for saving', { symbol });
            return false;
        }
        
        const data = generator.toJSON();
        const filename = path.join(DATA_DIR, `${symbol}.json`);
        
        fs.writeFileSync(filename, JSON.stringify(data, null, 2), 'utf8');
        
        logger.debug('persistence', 'Generator saved', { 
            symbol, 
            filename,
            candleCount: data.savedCandleCount 
        });
        
        return true;
    } catch (error) {
        logger.error('persistence', 'Failed to save generator', { 
            symbol, 
            error: error.message 
        });
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
function loadGenerator(symbol) {
    try {
        const filename = path.join(DATA_DIR, `${symbol}.json`);
        
        if (!fs.existsSync(filename)) {
            logger.debug('persistence', 'No saved data found', { symbol, filename });
            return null;
        }
        
        const data = JSON.parse(fs.readFileSync(filename, 'utf8'));
        
        logger.info('persistence', 'Generator data loaded from file', { 
            symbol,
            candleCount: data.savedCandleCount,
            savedAt: new Date(data.savedAt).toISOString()
        });
        
        return data;
    } catch (error) {
        logger.error('persistence', 'Failed to load generator', { 
            symbol, 
            error: error.message 
        });
        return null;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
function saveAllGenerators() {
    logger.info('persistence', 'Saving all generators...', { count: generators.size });
    
    let saved = 0;
    let failed = 0;
    
    generators.forEach((generator, symbol) => {
        if (saveGenerator(symbol)) {
            saved++;
        } else {
            failed++;
        }
    });
    
    logger.info('persistence', 'All generators saved', { 
        total: generators.size,
        saved,
        failed
    });
    
    return { saved, failed };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞)
function initializeAllGenerators() {
    logger.info('initialization', 'Initializing all generators for 24/7 operation...');
    
    const symbols = Object.keys(SYMBOL_CONFIG);
    let initialized = 0;
    let restored = 0;
    
    symbols.forEach(symbol => {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const savedData = loadGenerator(symbol);
        
        // –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –µ—Å–ª–∏ –Ω–µ—Ç)
        const generator = getGenerator(symbol);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if (savedData && generator.fromJSON(savedData)) {
            restored++;
        }
        
        initialized++;
    });
    
    logger.info('initialization', 'All generators initialized', {
        total: symbols.length,
        initialized,
        restored,
        fresh: initialized - restored
    });
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log(`‚úÖ Initialized ${initialized} chart generators (${restored} restored, ${initialized - restored} fresh)`);
    
    return { initialized, restored };
}

module.exports = { 
    ChartGenerator, 
    getGenerator, 
    generators,
    saveAllGenerators,
    initializeAllGenerators,
    SYMBOL_CONFIG
};
