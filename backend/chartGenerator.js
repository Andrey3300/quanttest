// üéØ TICK-BASED CHART GENERATOR (IQCent/Quotex Style)
// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–ò–ö–ò (–Ω–µ —Å–≤–µ—á–∏), –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤–æ –í–°–ï —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã

const fs = require('fs');
const path = require('path');
const logger = require('./errorLogger');

// ===== TIMEFRAME CONFIGURATION =====
const TIMEFRAMES = {
    'S5': { seconds: 5, name: '5 seconds' },
    'S10': { seconds: 10, name: '10 seconds' },
    'S15': { seconds: 15, name: '15 seconds' },
    'S30': { seconds: 30, name: '30 seconds' },
    'M1': { seconds: 60, name: '1 minute' },
    'M2': { seconds: 120, name: '2 minutes' },
    'M3': { seconds: 180, name: '3 minutes' },
    'M5': { seconds: 300, name: '5 minutes' },
    'M10': { seconds: 600, name: '10 minutes' },
    'M15': { seconds: 900, name: '15 minutes' },
    'M30': { seconds: 1800, name: '30 minutes' }
};

// ===== SYMBOL CONFIGURATION =====
// üî• –£–í–ï–õ–ò–ß–ï–ù–ê –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨: –≤ 20 —Ä–∞–∑ –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö —Å–≤–µ—á–µ–π —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º
const SYMBOL_CONFIG = {
    // Forex OTC - –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 0.010-0.020 (–±—ã–ª–æ 0.0005-0.001)
    'USD_MXN_OTC': { basePrice: 18.50, volatility: 0.015, type: 'FOREX' },
    'EUR_USD_OTC': { basePrice: 1.0850, volatility: 0.012, type: 'FOREX' },
    'GBP_USD_OTC': { basePrice: 1.2650, volatility: 0.014, type: 'FOREX' },
    'AUD_CAD_OTC': { basePrice: 0.9120, volatility: 0.012, type: 'FOREX' },
    'BHD_CNY_OTC': { basePrice: 18.75, volatility: 0.010, type: 'FOREX' },
    'EUR_CHF_OTC': { basePrice: 0.9420, volatility: 0.010, type: 'FOREX' },
    'KES_USD_OTC': { basePrice: 0.0077, volatility: 0.016, type: 'FOREX' },
    'TND_USD_OTC': { basePrice: 0.3180, volatility: 0.012, type: 'FOREX' },
    'UAH_USD_OTC': { basePrice: 0.0244, volatility: 0.018, type: 'FOREX' },
    'USD_BDT_OTC': { basePrice: 119.50, volatility: 0.008, type: 'FOREX' },
    'USD_CNH_OTC': { basePrice: 7.2450, volatility: 0.010, type: 'FOREX' },
    'USD_IDR_OTC': { basePrice: 15680, volatility: 0.012, type: 'FOREX' },
    'USD_MYR_OTC': { basePrice: 4.4850, volatility: 0.010, type: 'FOREX' },
    'AUD_NZD_OTC': { basePrice: 1.0920, volatility: 0.012, type: 'FOREX' },
    'USD_PHP_OTC': { basePrice: 56.25, volatility: 0.012, type: 'FOREX' },
    'ZAR_USD_OTC': { basePrice: 0.0548, volatility: 0.020, type: 'FOREX' },
    'YER_USD_OTC': { basePrice: 0.0040, volatility: 0.016, type: 'FOREX' },
    'USD_BRL_OTC': { basePrice: 5.6250, volatility: 0.018, type: 'FOREX' },
    'USD_EGP_OTC': { basePrice: 48.75, volatility: 0.014, type: 'FOREX' },
    'OMR_CNY_OTC': { basePrice: 18.95, volatility: 0.012, type: 'FOREX' },
    'AUD_JPY_OTC': { basePrice: 97.50, volatility: 0.016, type: 'FOREX' },
    'EUR_CHF_OTC2': { basePrice: 0.9420, volatility: 0.010, type: 'FOREX' },
    'EUR_GBP_OTC': { basePrice: 0.8580, volatility: 0.012, type: 'FOREX' },
    'EUR_HUF_OTC': { basePrice: 395.00, volatility: 0.016, type: 'FOREX' },
    'EUR_TRY_OTC': { basePrice: 36.25, volatility: 0.024, type: 'FOREX' },
    'USD_JPY_OTC': { basePrice: 149.50, volatility: 0.014, type: 'FOREX' },
    'USD_CHF_OTC': { basePrice: 0.8680, volatility: 0.010, type: 'FOREX' },
    
    // Forex Regular
    'USD_CAD': { basePrice: 1.3850, volatility: 0.012, type: 'FOREX' },
    'AUD_CHF': { basePrice: 0.5720, volatility: 0.014, type: 'FOREX' },
    'CHF_JPY': { basePrice: 172.25, volatility: 0.016, type: 'FOREX' },
    'EUR_AUD': { basePrice: 1.6450, volatility: 0.014, type: 'FOREX' },
    'EUR_CHF': { basePrice: 0.9420, volatility: 0.010, type: 'FOREX' },
    'EUR_GBP': { basePrice: 0.8580, volatility: 0.012, type: 'FOREX' },
    'EUR_JPY': { basePrice: 162.00, volatility: 0.016, type: 'FOREX' },
    'EUR_USD': { basePrice: 1.0850, volatility: 0.012, type: 'FOREX' },
    'GBP_CAD': { basePrice: 1.7520, volatility: 0.014, type: 'FOREX' },
    'GBP_CHF': { basePrice: 1.0980, volatility: 0.014, type: 'FOREX' },
    'GBP_USD': { basePrice: 1.2650, volatility: 0.014, type: 'FOREX' },
    
    // Crypto - –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 0.08-0.18 (–±—ã–ª–æ 0.005-0.009)
    'BTC_OTC': { basePrice: 67500, volatility: 0.10, type: 'CRYPTO' },
    'ETH_OTC': { basePrice: 3250, volatility: 0.12, type: 'CRYPTO' },
    'BNB_OTC': { basePrice: 585, volatility: 0.14, type: 'CRYPTO' },
    'SOL_OTC': { basePrice: 165, volatility: 0.16, type: 'CRYPTO' },
    'DOGE_OTC': { basePrice: 0.145, volatility: 0.18, type: 'CRYPTO' },
    'ADA_OTC': { basePrice: 0.58, volatility: 0.16, type: 'CRYPTO' },
    'DOT_OTC': { basePrice: 6.85, volatility: 0.16, type: 'CRYPTO' },
    'MATIC_OTC': { basePrice: 0.72, volatility: 0.18, type: 'CRYPTO' },
    'LTC_OTC': { basePrice: 85, volatility: 0.14, type: 'CRYPTO' },
    'LINK_OTC': { basePrice: 14.50, volatility: 0.16, type: 'CRYPTO' },
    'AVAX_OTC': { basePrice: 38, volatility: 0.18, type: 'CRYPTO' },
    'TRX_OTC': { basePrice: 0.165, volatility: 0.16, type: 'CRYPTO' },
    'TON_OTC': { basePrice: 5.25, volatility: 0.18, type: 'CRYPTO' },
    'BTC_ETF_OTC': { basePrice: 67500, volatility: 0.10, type: 'CRYPTO' },
    'TEST_TEST1': { basePrice: 1.0, volatility: 0.00152, type: 'FOREX' }, // üéØ CALIBRATED: baseVolatility –¥–ª—è M1 (–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö IQCent)
    'BTC': { basePrice: 67500, volatility: 0.10, type: 'CRYPTO' },
    
    // Commodities - –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 0.06-0.16 (–±—ã–ª–æ 0.003-0.008)
    'GOLD_OTC': { basePrice: 2650, volatility: 0.06, type: 'COMMODITIES' },
    'SILVER_OTC': { basePrice: 31.50, volatility: 0.08, type: 'COMMODITIES' },
    'BRENT_OTC': { basePrice: 85.50, volatility: 0.10, type: 'COMMODITIES' },
    'WTI_OTC': { basePrice: 81.25, volatility: 0.10, type: 'COMMODITIES' },
    'NATGAS_OTC': { basePrice: 3.25, volatility: 0.16, type: 'COMMODITIES' },
    'PALLADIUM_OTC': { basePrice: 1050, volatility: 0.12, type: 'COMMODITIES' },
    'PLATINUM_OTC': { basePrice: 980, volatility: 0.10, type: 'COMMODITIES' }
};

// ===== CANDLE AGGREGATOR CLASS =====
class CandleAggregator {
    constructor(symbol, timeframe, timeframeSeconds) {
        this.symbol = symbol;
        this.timeframe = timeframe;
        this.timeframeSeconds = timeframeSeconds;
        this.candles = []; // –ò—Å—Ç–æ—Ä–∏—è —Å–≤–µ—á–µ–π
        this.currentCandle = null; // –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∏—Ä—É—é—â–∞—è—Å—è —Å–≤–µ—á–∞
        this.maxCandles = 20000; // üéØ –£–í–ï–õ–ò–ß–ï–ù–û: –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20000 —Å–≤–µ—á–µ–π (–±—ã–ª–æ 1000)
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤—ã–º —Ç–∏–∫–æ–º
     */
    addTick(tick) {
        const candleStartTime = this.getCandleStartTime(tick.time);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–≤–µ—á—É
        if (!this.currentCandle || this.currentCandle.time !== candleStartTime) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–≤–µ—á—É
            if (this.currentCandle) {
                this.candles.push({ ...this.currentCandle });
                
                // üéØ –£–í–ï–õ–ò–ß–ï–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–æ 20000 (–±—ã–ª–æ 1000)
                if (this.candles.length > this.maxCandles) {
                    this.candles.shift();
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
            this.currentCandle = {
                time: candleStartTime,
                open: tick.price,
                high: tick.price,
                low: tick.price,
                close: tick.price
            };
            
            return { isNewCandle: true, completedCandle: this.candles[this.candles.length - 1] };
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
            this.currentCandle.high = Math.max(this.currentCandle.high, tick.price);
            this.currentCandle.low = Math.min(this.currentCandle.low, tick.price);
            this.currentCandle.close = tick.price;
            
            return { isNewCandle: false, currentCandle: { ...this.currentCandle } };
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª–æ —Å–≤–µ—á–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ timestamp
     */
    getCandleStartTime(timestamp) {
        return Math.floor(timestamp / this.timeframeSeconds) * this.timeframeSeconds;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤–µ—á–∏
     */
    getCandles() {
        return this.candles;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è —Å–≤–µ—á—É
     */
    getCurrentCandle() {
        return this.currentCandle ? { ...this.currentCandle } : null;
    }
}

// ===== TICK GENERATOR CLASS =====
class TickGenerator {
    constructor(symbol) {
        const config = SYMBOL_CONFIG[symbol];
        if (!config) {
            throw new Error(`Unknown symbol: ${symbol}`);
        }
        
        this.symbol = symbol;
        this.basePrice = config.basePrice;
        this.currentPrice = config.basePrice;
        this.volatility = config.volatility;
        this.type = config.type;
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Geometric Brownian Motion
        this.drift = 0.0;
        this.meanReversionSpeed = 0.05;
        
        // üåä –°–ò–°–¢–ï–ú–ê –í–û–õ–ù–û–û–ë–†–ê–ó–ù–û–ì–û –î–í–ò–ñ–ï–ù–ò–Ø (–∏–∑ work4)
        this.currentDrift = 0.0; // —Ç–µ–∫—É—â–∏–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–¥ (–∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º)
        this.trendChangeCounter = 0; // —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–∞
        this.trendChangePeriod = this.randomInt(30, 80); // –º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–¥ –∫–∞–∂–¥—ã–µ 30-80 —Å–≤–µ—á–µ–π
        this.trendStrength = 0.0002; // —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ª–Ω)
        
        // üéØ –¢–†–Å–•–£–†–û–í–ù–ï–í–ê–Ø –°–ò–°–¢–ï–ú–ê –î–õ–Ø TEST/TEST1 (IQ Option / Quotex —Å—Ç–∏–ª—å)
        if (symbol === 'TEST_TEST1') {
            this.trendCounter = 40 + Math.random() * 80; // –°—á—ë—Ç—á–∏–∫ –¥–æ —Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–∞ (40-120 —Å–≤–µ—á–µ–π)
            this.trendDir = (Math.random() - 0.5) * 2; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (-1..1)
            this.trendStrengthTest = 0.0003 + Math.random() * 0.0012; // –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (0.0003-0.0015)
        }
        
        // –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        this.aggregators = {};
        Object.keys(TIMEFRAMES).forEach(tf => {
            this.aggregators[tf] = new CandleAggregator(
                symbol,
                tf,
                TIMEFRAMES[tf].seconds
            );
        });
        
        // –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
        this.dataDir = path.join(__dirname, '..', 'data', symbol);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.initialized = false;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    async initialize() {
        if (this.initialized) return;
        
        console.log(`üìä Initializing ${this.symbol}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const hasData = this.loadFromFiles();
        
        if (!hasData) {
            // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
            console.log(`   Generating 30 days history for all timeframes...`);
            await this.generateHistoricalData();
            this.saveToFiles();
        }
        
        this.initialized = true;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        const candleCounts = Object.keys(this.aggregators).map(tf => 
            `${tf}:${this.aggregators[tf].candles.length}`
        ).join(', ');
        console.log(`   ‚úÖ ${this.symbol} ready (${candleCounts})`);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [min, max]
     */
    randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    
    /**
     * üåä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (–∏–∑ work4)
     */
    updateTrend() {
        this.trendChangeCounter++;
        
        // –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–¥?
        if (this.trendChangeCounter >= this.trendChangePeriod) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Ö–æ–¥—è—â–∏–º, –Ω–∏—Å—Ö–æ–¥—è—â–∏–º –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º)
            const trendType = Math.random();
            
            if (trendType < 0.35) {
                // –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (35%)
                const u1 = Math.random();
                const u2 = Math.random();
                const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
                this.currentDrift = this.trendStrength * (1.0 + z0 * 0.3);
            } else if (trendType < 0.70) {
                // –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (35%)
                const u1 = Math.random();
                const u2 = Math.random();
                const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
                this.currentDrift = -this.trendStrength * (1.0 + z0 * 0.3);
            } else {
                // –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (30%)
                const u1 = Math.random();
                const u2 = Math.random();
                const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
                this.currentDrift = this.trendStrength * (z0 * 0.5);
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
            this.trendChangeCounter = 0;
            this.trendChangePeriod = this.randomInt(30, 80);
        } else {
            // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º)
            const u1 = Math.random();
            const u2 = Math.random();
            const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
            this.currentDrift += z0 * this.trendStrength * 0.1;
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ —á—Ç–æ–±—ã –æ–Ω –Ω–µ —É–ª–µ—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            this.currentDrift = Math.max(-this.trendStrength * 2, Math.min(this.trendStrength * 2, this.currentDrift));
        }
    }
    
    /**
     * üî• –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –ù–ê–ü–†–Ø–ú–£–Æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
     */
    async generateHistoricalData() {
        const now = Math.floor(Date.now() / 1000);
        const startTime = now - (30 * 24 * 60 * 60); // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        
        console.log(`   Generating candles for each timeframe with scaled volatility...`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        for (const [timeframe, config] of Object.entries(TIMEFRAMES)) {
            const timeframeSeconds = config.seconds;
            const timeframeMinutes = timeframeSeconds / 60;
            
            // üéØ –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨: –° –Ω–∞—Å—ã—â–µ–Ω–∏–µ–º (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö IQCent)
            const scaledVolatility = this.getScaledVolatility(timeframeSeconds);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            let currentTime = startTime;
            let price = this.basePrice;
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è 30 –¥–Ω–µ–π
            const totalCandles = Math.floor((30 * 24 * 60 * 60) / timeframeSeconds);
            
            for (let i = 0; i < totalCandles; i++) {
                const candleTime = Math.floor(currentTime / timeframeSeconds) * timeframeSeconds;
                
                // üéØ SEEDED RANDOM: –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp + timeframe –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
                const seed = candleTime + timeframe.charCodeAt(0);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC –¥–ª—è —Å–≤–µ—á–∏ —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                const candle = this.generateCandle(price, scaledVolatility, seed, timeframeMinutes);
                candle.time = candleTime;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
                this.aggregators[timeframe].candles.push(candle);
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                if (this.aggregators[timeframe].candles.length > this.aggregators[timeframe].maxCandles) {
                    this.aggregators[timeframe].candles.shift();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º close)
                price = candle.close;
                currentTime += timeframeSeconds;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è —Å–≤–µ—á—É
            const lastCandle = this.aggregators[timeframe].candles[this.aggregators[timeframe].candles.length - 1];
            if (lastCandle) {
                this.aggregators[timeframe].currentCandle = {
                    time: lastCandle.time + timeframeSeconds,
                    open: lastCandle.close,
                    high: lastCandle.close,
                    low: lastCandle.close,
                    close: lastCandle.close
                };
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ —Å–∞–º–æ–≥–æ –º–µ–ª–∫–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞)
        const s5LastCandle = this.aggregators['S5'].candles[this.aggregators['S5'].candles.length - 1];
        this.currentPrice = s5LastCandle ? s5LastCandle.close : this.basePrice;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
     */
    generateTick() {
        const now = Math.floor(Date.now() / 1000);
        this.currentPrice = this.generateNextPrice(this.currentPrice);
        
        const tick = {
            time: now,
            price: this.currentPrice
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã
        const results = {};
        Object.keys(this.aggregators).forEach(tf => {
            results[tf] = this.aggregators[tf].addTick(tick);
        });
        
        return { tick, aggregationResults: results };
    }
    
    /**
     * üéØ –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò: –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö IQCent
     * –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç—ë—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ —á–µ–º ‚àöt –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (—ç—Ñ—Ñ–µ–∫—Ç –Ω–∞—Å—ã—â–µ–Ω–∏—è)
     */
    getScaledVolatility(timeframeSeconds) {
        // –ë–∞–∑–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è M1 (60 —Å–µ–∫—É–Ω–¥)
        const baseSeconds = 60;
        
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö IQCent:
        // S5 (5s): 0.25x, M1 (60s): 1.0x, M5 (300s): 2.17x, M15 (900s): 3.18x, M30 (1800s): 3.60x
        // –§–æ—Ä–º—É–ª–∞: k = ‚àö(t/base) –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö TF, —Å –Ω–∞—Å—ã—â–µ–Ω–∏–µ–º –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö
        
        const ratio = timeframeSeconds / baseSeconds;
        
        if (ratio <= 1) {
            // –ö–æ—Ä–æ—Ç–∫–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (S5-M1): –ª–∏–Ω–µ–π–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            const scalingFactor = Math.sqrt(ratio);
            return this.volatility * scalingFactor;
        } else {
            // –î–ª–∏–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (M2-M30): —Å –Ω–∞—Å—ã—â–µ–Ω–∏–µ–º (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç)
            // k = ‚àöratio * (1 + ln(ratio)/5) - —Ñ–æ—Ä–º—É–ª–∞ —Å –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
            const sqrtRatio = Math.sqrt(ratio);
            const saturation = 1 + Math.log(ratio) / 5;
            const scalingFactor = sqrtRatio * saturation;
            return this.volatility * scalingFactor;
        }
    }
    
    /**
     * üî• –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å–≤–µ—á–∏ —Å SOFT BOUNDARIES –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
     */
    generateCandle(basePrice, scaledVolatility, seed, timeframeMinutes) {
        // Seeded random –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        const random = this.seededRandom(seed);
        const random2 = this.seededRandom(seed + 1);
        const random3 = this.seededRandom(seed + 2);
        const random4 = this.seededRandom(seed + 3);
        
        // üéØ SOFT BOUNDARIES: Mean reversion (–≤–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ)
        // –ß–µ–º –¥–∞–ª—å—à–µ —Ü–µ–Ω–∞ –æ—Ç –±–∞–∑–æ–≤–æ–π, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Ç—è–Ω–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ
        const deviation = (basePrice - this.basePrice) / this.basePrice;
        const meanReversionForce = -deviation * 0.3; // 30% –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ä–µ–¥–Ω–µ–º—É
        
        // üåä –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è (–ø–ª–∞–≤–Ω—ã–µ –≤–æ–ª–Ω—ã)
        const trendForce = Math.sin(seed / 5000) * 0.001; // –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—É—Å–æ–∏–¥–∞
        
        // üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (Gaussian random —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–æ ¬±2.5œÉ)
        const randomGaussian = this.clampGaussian(this.gaussianFromSeed(random, random2), 2.5);
        const randomChange = randomGaussian * scaledVolatility;
        
        // üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã Open
        const priceChange = meanReversionForce + trendForce + randomChange;
        const open = basePrice * (1 + priceChange);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º High, Low, Close –≤–Ω—É—Ç—Ä–∏ —Å–≤–µ—á–∏
        // üéØ –†–ï–ê–õ–ò–ó–ú: –¢–µ–ª–æ + —Ç–µ–Ω–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω = 100%, —Ç–µ–ª–æ = 40-70%, —Ç–µ–Ω–∏ = –æ—Å—Ç–∞—Ç–æ–∫)
        const totalRange = scaledVolatility * 1.2; // –ü–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–≤–µ—á–∏
        const bodyRatio = 0.4 + random3 * 0.3; // –¢–µ–ª–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 40-70% –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        
        // High –∏ Low –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Open (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º Gaussian)
        const highGaussian = this.clampGaussian(Math.abs(this.gaussianFromSeed(random3, random4)), 2.0);
        const lowGaussian = this.clampGaussian(Math.abs(this.gaussianFromSeed(random4, random3)), 2.0);
        
        const highChange = highGaussian * totalRange * 0.6;
        const lowChange = -lowGaussian * totalRange * 0.6;
        
        const high = open * (1 + highChange);
        const low = open * (1 + lowChange);
        
        // Close –≥–¥–µ-—Ç–æ –º–µ–∂–¥—É High –∏ Low (—Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º)
        const closeRatio = random3 * 0.6 + 0.2; // 0.2 - 0.8
        const close = low + (high - low) * closeRatio;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º SOFT BOUNDARIES (–º—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
        const maxDeviation = 0.03; // –ú–∞–∫—Å–∏–º—É–º ¬±3% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è —Ñ–æ—Ä–µ–∫—Å–∞)
        const minPrice = this.basePrice * (1 - maxDeviation);
        const maxPrice = this.basePrice * (1 + maxDeviation);
        
        // –ú—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ tanh (–ø–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º)
        const softClamp = (value) => {
            if (value < minPrice) {
                const overshoot = (minPrice - value) / this.basePrice;
                return minPrice - this.basePrice * 0.01 * Math.tanh(overshoot * 10);
            }
            if (value > maxPrice) {
                const overshoot = (value - maxPrice) / this.basePrice;
                return maxPrice + this.basePrice * 0.01 * Math.tanh(overshoot * 10);
            }
            return value;
        };
        
        return {
            open: softClamp(open),
            high: softClamp(high),
            low: softClamp(low),
            close: softClamp(close)
        };
    }
    
    /**
     * Seeded random: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ seed
     */
    seededRandom(seed) {
        const x = Math.sin(seed) * 10000;
        return x - Math.floor(x);
    }
    
    /**
     * Gaussian random –∏–∑ –¥–≤—É—Ö seeded random (Box-Muller transform)
     */
    gaussianFromSeed(u1, u2) {
        if (u1 === 0) u1 = 0.0001;
        if (u2 === 0) u2 = 0.0001;
        return Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);
    }
    
    /**
     * üéØ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Gaussian random –¥–æ ¬±N —Å–∏–≥–º–∞ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤)
     */
    clampGaussian(value, sigma) {
        return Math.max(-sigma, Math.min(sigma, value));
    }
    
    /**
     * (–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–∏–∫–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ (–∏–∑ work4 + —É–ª—É—á—à–µ–Ω–∏—è)
     */
    generateNextPrice(currentPrice, isHistorical = false) {
        // üéØ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê: tickVolatility —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        // tickInterval = 500ms = 0.5 —Å–µ–∫
        const tickIntervalSeconds = 0.5;
        const tickVolatility = this.getScaledVolatility(tickIntervalSeconds);
        
        if (this.symbol === 'TEST_TEST1') {
            // 1. –ü–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥ (–æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
            this.trendCounter--;
            if (this.trendCounter <= 0) {
                this.trendCounter = 40 + Math.random() * 80; // 40-120 —Ç–∏–∫–æ–≤ –¥–æ —Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–∞
                this.trendDir = (Math.random() - 0.5) * 2; // -1..1 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                // –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è —Ç–∞–∫–∂–µ –ø–æ–¥ —Ç–∏–∫–∏
                this.trendStrengthTest = tickVolatility * 0.3; // 30% –æ—Ç tick volatility
            }
            
            // 2. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (Gaussian random)
            const randomChange = this.gaussianRandom() * tickVolatility;
            
            // 3. –ò–º–∏—Ç–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –ø—É–ª—å—Å–∞ (–º–∏–∫—Ä–æ-–≤–æ–ª–Ω—ã)
            const pulse = Math.sin(Date.now() / 5000) * tickVolatility * 0.1; // 10% –ø—É–ª—å—Å–∞—Ü–∏—è
            
            // 4. Mean reversion (–º—è–≥–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ)
            const deviation = (currentPrice - this.basePrice) / this.basePrice;
            const meanReversionForce = -deviation * tickVolatility * 0.2; // 20% –æ—Ç tick volatility
            
            // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            const priceChange = this.trendDir * this.trendStrengthTest + randomChange + pulse + meanReversionForce;
            let next = currentPrice + priceChange;
            
            // –ú—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (¬±5% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã)
            const minPrice = this.basePrice * 0.95;
            const maxPrice = this.basePrice * 1.05;
            next = Math.max(minPrice, Math.min(maxPrice, next));
            
            return parseFloat(next.toFixed(6));
        }
        
        // üåä –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–• –ê–ö–¢–ò–í–û–í: –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –¥–ª—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        this.updateTrend();
        
        // Mean reversion: —Ü–µ–Ω–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–∞–∑–æ–≤–æ–π (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏–ª–∞)
        const deviation = Math.abs(currentPrice - this.basePrice) / this.basePrice;
        const adaptiveMeanReversion = this.meanReversionSpeed * Math.pow(deviation * 10, 1.5);
        const meanReversionForce = (this.basePrice - currentPrice) * adaptiveMeanReversion;
        
        // Geometric Brownian Motion —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–Ω–¥–æ–º
        const randomShock = this.gaussianRandom() * this.volatility;
        const priceChange = this.currentDrift + meanReversionForce + randomShock;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const maxCandleChange = 0.015; // 1.5%
        const limitedChange = Math.max(-maxCandleChange, Math.min(maxCandleChange, priceChange));
        
        let newPrice = currentPrice * (1 + limitedChange);
        
        // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ü–µ–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        newPrice = Math.max(newPrice, this.basePrice * 0.9);
        newPrice = Math.min(newPrice, this.basePrice * 1.1);
        
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
        const decimals = this.basePrice < 1 ? 6 : this.basePrice < 100 ? 4 : 2;
        return parseFloat(newPrice.toFixed(decimals));
    }
    
    /**
     * –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (Box-Muller) –ë–ï–ó seed
     */
    gaussianRandom() {
        let u = 0, v = 0;
        while (u === 0) u = Math.random();
        while (v === 0) v = Math.random();
        return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
    }
    
    /**
     * üöÄ –ê–í–¢–û–ì–ï–ù–ï–†–ê–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–∞ –ª–µ—Ç—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
     */
    getCandles(timeframe, from = null, to = null, limit = null, before = null) {
        const aggregator = this.aggregators[timeframe];
        if (!aggregator) {
            throw new Error(`Unknown timeframe: ${timeframe}`);
        }
        
        let candles = aggregator.getCandles();
        
        // üöÄ –ê–í–¢–û–ì–ï–ù–ï–†–ê–¶–ò–Ø: –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç —Å–≤–µ—á–∏ –†–ê–ù–¨–®–ï —á–µ–º –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –ª–µ—Ç—É
        if (before !== null && candles.length > 0) {
            const oldestCandle = candles[0];
            
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ —á–µ–º —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Å–≤–µ—á–∞ - –Ω—É–∂–Ω–æ –¥–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            if (before < oldestCandle.time) {
                console.log(`üîÑ Auto-generating older candles for ${this.symbol} ${timeframe} (before ${new Date(before * 1000).toISOString()})...`);
                this.generateOlderCandles(timeframe, before, limit || 100);
                candles = aggregator.getCandles(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            }
        }
        
        // üéØ PAGINATION: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ before (–≤–µ—Ä–Ω—É—Ç—å —Å–≤–µ—á–∏ –î–û —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        if (before !== null) {
            candles = candles.filter(c => c.time < before);
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (from !== null) {
            candles = candles.filter(c => c.time >= from);
        }
        if (to !== null) {
            candles = candles.filter(c => c.time <= to);
        }
        
        // üéØ PAGINATION: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit —Å–≤–µ—á–µ–π)
        if (limit !== null && limit > 0) {
            candles = candles.slice(-limit);
        }
        
        return candles;
    }
    
    /**
     * üöÄ –ê–í–¢–û–ì–ï–ù–ï–†–ê–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –°–¢–ê–†–´–• —Å–≤–µ—á–µ–π (–ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –Ω–∞–∑–∞–¥)
     */
    generateOlderCandles(timeframe, beforeTime, count = 100) {
        const aggregator = this.aggregators[timeframe];
        const config = TIMEFRAMES[timeframe];
        const timeframeSeconds = config.seconds;
        const timeframeMinutes = timeframeSeconds / 60;
        
        // üéØ –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ —Å –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–æ–π
        const scaledVolatility = this.getScaledVolatility(timeframeSeconds);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        const oldestCandle = aggregator.candles[0];
        let endTime = oldestCandle ? oldestCandle.time : beforeTime;
        let startTime = endTime - (timeframeSeconds * count);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        let price = this.basePrice; // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
        const newCandles = [];
        
        for (let currentTime = startTime; currentTime < endTime; currentTime += timeframeSeconds) {
            const candleTime = Math.floor(currentTime / timeframeSeconds) * timeframeSeconds;
            
            // üéØ SEEDED RANDOM –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            const seed = candleTime + timeframe.charCodeAt(0);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–µ—á—É
            const candle = this.generateCandle(price, scaledVolatility, seed, timeframeMinutes);
            candle.time = candleTime;
            
            newCandles.push(candle);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
            price = candle.close;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏ –í –ù–ê–ß–ê–õ–û –º–∞—Å—Å–∏–≤–∞
        aggregator.candles = [...newCandles, ...aggregator.candles];
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä (—É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ –ù–û–í–´–ï –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç)
        if (aggregator.candles.length > aggregator.maxCandles) {
            const excess = aggregator.candles.length - aggregator.maxCandles;
            aggregator.candles = aggregator.candles.slice(0, -excess);
        }
        
        console.log(`‚úÖ Generated ${newCandles.length} older candles for ${this.symbol} ${timeframe}`);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è —Å–≤–µ—á—É
     */
    getCurrentCandle(timeframe) {
        const aggregator = this.aggregators[timeframe];
        if (!aggregator) {
            throw new Error(`Unknown timeframe: ${timeframe}`);
        }
        
        return aggregator.getCurrentCandle();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
     */
    getCurrentPrice() {
        return this.currentPrice;
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã
     */
    saveToFiles() {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!fs.existsSync(this.dataDir)) {
            fs.mkdirSync(this.dataDir, { recursive: true });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        Object.keys(TIMEFRAMES).forEach(tf => {
            const filePath = path.join(this.dataDir, `${tf}.json`);
            const data = {
                symbol: this.symbol,
                timeframe: tf,
                currentPrice: this.currentPrice,
                candles: this.aggregators[tf].getCandles(),
                currentCandle: this.aggregators[tf].getCurrentCandle(),
                timestamp: Date.now()
            };
            
            fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
        });
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
     */
    loadFromFiles() {
        if (!fs.existsSync(this.dataDir)) {
            return false;
        }
        
        let loaded = false;
        
        Object.keys(TIMEFRAMES).forEach(tf => {
            const filePath = path.join(this.dataDir, `${tf}.json`);
            
            if (fs.existsSync(filePath)) {
                try {
                    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—á–∏
                    this.aggregators[tf].candles = data.candles || [];
                    if (data.currentCandle) {
                        this.aggregators[tf].currentCandle = data.currentCandle;
                    }
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    if (data.currentPrice) {
                        this.currentPrice = data.currentPrice;
                    }
                    
                    loaded = true;
                } catch (error) {
                    console.error(`Error loading ${filePath}:`, error.message);
                }
            }
        });
        
        return loaded;
    }
}

// ===== GLOBAL GENERATOR REGISTRY =====
const generators = new Map();

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–∏–º–≤–æ–ª–∞
 */
function getGenerator(symbol) {
    if (!generators.has(symbol)) {
        const generator = new TickGenerator(symbol);
        generators.set(symbol, generator);
    }
    return generators.get(symbol);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
 */
async function initializeAllGenerators() {
    const symbols = Object.keys(SYMBOL_CONFIG);
    const startTime = Date.now();
    
    console.log(`üöÄ Initializing ${symbols.length} tick generators...`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏)
    const batchSize = 10;
    for (let i = 0; i < symbols.length; i += batchSize) {
        const batch = symbols.slice(i, i + batchSize);
        await Promise.all(batch.map(async symbol => {
            const generator = getGenerator(symbol);
            await generator.initialize();
        }));
    }
    
    const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);
    console.log(`‚úÖ All generators initialized in ${elapsed}s`);
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
 */
function saveAllGenerators() {
    let saved = 0;
    let failed = 0;
    
    generators.forEach((generator, symbol) => {
        try {
            generator.saveToFiles();
            saved++;
        } catch (error) {
            console.error(`Failed to save ${symbol}:`, error.message);
            failed++;
        }
    });
    
    return { saved, failed };
}

// ===== EXPORTS =====
module.exports = {
    TickGenerator,
    getGenerator,
    initializeAllGenerators,
    saveAllGenerators,
    TIMEFRAMES,
    SYMBOL_CONFIG
};
