// üéØ SIMPLIFIED CHART MANAGER (IQCent/Quotex Style)
// –†–∞–±–æ—Ç–∞–µ—Ç —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å–≤–µ—á–∞–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ + –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É —Ç–∏–∫–∞–º–∏

class ChartManager {
    constructor() {
        this.chart = null;
        this.candleSeries = null;
        this.lineSeries = null;
        this.barSeries = null;
        this.ws = null;
        this.symbol = 'USD_MXN_OTC';
        this.timeframe = localStorage.getItem('chartTimeframe') || 'S5';
        this.chartType = localStorage.getItem('chartType') || 'candles';
        this.isInitialized = false;
        
        // –î–∞–Ω–Ω—ã–µ
        this.candles = []; // –ò—Å—Ç–æ—Ä–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        this.currentCandle = null; // –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∏—Ä—É—é—â–∞—è—Å—è —Å–≤–µ—á–∞
        this.currentPrice = null;
        
        // –õ–∏–Ω–∏—è —Ü–µ–Ω—ã
        this.expirationPriceLine = null;
        
        // WebSocket —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.connectionId = 0;
        this.isDestroyed = false;
        this.reconnectTimer = null;
        
        // üéØ –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø –î–õ–Ø –ü–õ–ê–í–ù–û–°–¢–ò (60fps smooth animation)
        this.interpolationEnabled = true; // –í–∫–ª—é—á–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        this.targetCandle = null; // –¶–µ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—á–∏ (–∫—É–¥–∞ –¥–≤–∏–∂–µ–º—Å—è)
        this.currentInterpolatedCandle = null; // –¢–µ–∫—É—â–µ–µ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.interpolationStartTime = null; // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        this.interpolationDuration = 300; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (ms) - –±–∞–∑–æ–≤–∞—è –¥–ª—è S5
        this.baseInterpolationDuration = 300; // –ë–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        this.animationFrameId = null; // ID –¥–ª—è requestAnimationFrame
        this.lastTickTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏–∫–∞
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–∏–Ω–∏–∏ —Ü–µ–Ω—ã
        this.lastPriceLineUpdate = 0;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    init() {
        const chartContainer = document.getElementById('chart');
        if (!chartContainer) {
            console.error('Chart container not found');
            return;
        }

        const parentContainer = chartContainer.parentElement;
        const width = parentContainer ? parentContainer.clientWidth : chartContainer.clientWidth;
        const height = parentContainer ? parentContainer.clientHeight : chartContainer.clientHeight;

        this.chart = LightweightCharts.createChart(chartContainer, {
            width: width,
            height: height,
            layout: {
                background: { color: '#1a1f2e' },
                textColor: '#a0aec0',
            },
            grid: {
                vertLines: { color: '#2d3748' },
                horzLines: { color: '#2d3748' },
            },
            crosshair: {
                mode: LightweightCharts.CrosshairMode.Normal,
            },
            rightPriceScale: {
                borderColor: '#2d3748',
                scaleMargins: {
                    top: 0.1,
                    bottom: 0.1,
                },
                mode: LightweightCharts.PriceScaleMode.Normal,
                autoScale: true,
            },
            timeScale: {
                borderColor: '#2d3748',
                timeVisible: true,
                secondsVisible: true,
                barSpacing: 8,
                minBarSpacing: 4,
                rightOffset: 50,
            },
        });

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏–∏
        this.candleSeries = this.chart.addCandlestickSeries({
            upColor: '#26d07c',
            downColor: '#ff4757',
            borderUpColor: '#26d07c',
            borderDownColor: '#ff4757',
            wickUpColor: '#26d07c',
            wickDownColor: '#ff4757',
            priceLineVisible: false,
            lastValueVisible: false,
        });

        this.lineSeries = this.chart.addLineSeries({
            color: '#2962FF',
            lineWidth: 2,
            priceLineVisible: false,
            lastValueVisible: false,
        });

        this.barSeries = this.chart.addBarSeries({
            upColor: '#26d07c',
            downColor: '#ff4757',
            priceLineVisible: false,
            lastValueVisible: false,
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
        this.applySeries();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å–∞–π–∑–∞
        window.addEventListener('resize', () => this.handleResize());

        this.isInitialized = true;
        console.log('üìä Chart initialized');
    }

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —Å–µ—Ä–∏—é)
    applySeries() {
        if (!this.chart) return;

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–∏–∏
        this.candleSeries.applyOptions({ visible: false });
        this.lineSeries.applyOptions({ visible: false });
        this.barSeries.applyOptions({ visible: false });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é
        if (this.chartType === 'line') {
            this.lineSeries.applyOptions({ visible: true });
        } else if (this.chartType === 'bars') {
            this.barSeries.applyOptions({ visible: true });
        } else {
            this.candleSeries.applyOptions({ visible: true });
        }
    }

    // üéØ –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    async loadHistoricalData(symbol, timeframe = this.timeframe) {
        if (!symbol) symbol = this.symbol;

        try {
            console.log(`üì• Loading ${symbol} ${timeframe} candles...`);

            const response = await fetch(`${API_URL}/api/chart/history?symbol=${symbol}&timeframe=${timeframe}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();
            
            this.candles = data.candles || [];
            this.currentPrice = data.currentPrice;

            console.log(`‚úÖ Loaded ${this.candles.length} ${timeframe} candles`);

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.renderCandles();

            // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã
            this.updatePriceLine(this.currentPrice);

            // üéØ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –¢–ê–ô–ú–ï–†–ê: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await this.syncTimerWithServer(symbol, timeframe);

        } catch (error) {
            console.error('Failed to load historical data:', error);
            window.errorLogger?.error('chart', 'Failed to load history', {
                symbol,
                timeframe,
                error: error.message
            });
        }
    }

    // üéØ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    async syncTimerWithServer(symbol, timeframe) {
        try {
            const response = await fetch(`${API_URL}/api/chart/current-state/${symbol}?timeframe=${timeframe}`);
            
            if (!response.ok) return;

            const state = await response.json();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä
            if (window.chartTimeframeManager && state.candleStartTime && state.timeframeSeconds) {
                window.chartTimeframeManager.syncWithServer(
                    state.candleStartTime,
                    state.timeframeSeconds,
                    state.serverTime
                );
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
            if (state.currentCandle) {
                this.currentCandle = state.currentCandle;
            }

        } catch (error) {
            console.error('Failed to sync timer:', error);
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–≤–µ—á–µ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    renderCandles() {
        if (!this.candleSeries || !this.lineSeries || !this.barSeries) return;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–∏–π
        this.candleSeries.setData(this.candles);
        this.lineSeries.setData(this.candles.map(c => ({ time: c.time, value: c.close })));
        this.barSeries.setData(this.candles);

        // –ü–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        if (this.candles.length > 0) {
            const lastCandle = this.candles[this.candles.length - 1];
            this.chart.timeScale().scrollToPosition(5, true);
        }
    }

    // üéØ –ù–û–í–û–ï: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket (—Ç–æ–ª—å–∫–æ —Ç–∏–∫–∏!)
    connectWebSocket(symbol) {
        if (!symbol) symbol = this.symbol;

        // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.disconnectWebSocket();

        this.connectionId++;
        const currentConnectionId = this.connectionId;

        console.log(`üîå Connecting to WebSocket for ${symbol}...`);

        try {
            const wsUrl = `${API_URL.replace('http', 'ws')}/ws/chart`;
            this.ws = new WebSocket(wsUrl);

            this.ws.onopen = () => {
                if (currentConnectionId !== this.connectionId) {
                    this.ws.close();
                    return;
                }

                console.log(`‚úÖ WebSocket connected for ${symbol}`);

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª (–ë–ï–ó —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞!)
                this.ws.send(JSON.stringify({
                    type: 'subscribe',
                    symbol: symbol
                }));
            };

            this.ws.onmessage = (event) => {
                if (currentConnectionId !== this.connectionId) return;

                try {
                    const data = JSON.parse(event.data);

                    if (data.type === 'tick') {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫
                        this.handleTick(data);
                    } else if (data.type === 'newCandle') {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
                        this.handleNewCandle(data);
                    } else if (data.type === 'subscribed') {
                        console.log(`‚úÖ Subscribed to ${data.symbol}`);
                    }
                } catch (error) {
                    console.error('WebSocket message error:', error);
                }
            };

            this.ws.onerror = (error) => {
                console.error('WebSocket error:', error);
            };

            this.ws.onclose = () => {
                if (currentConnectionId !== this.connectionId || this.isDestroyed) {
                    return;
                }

                console.log('‚ö†Ô∏è WebSocket disconnected, reconnecting in 3s...');
                
                this.reconnectTimer = setTimeout(() => {
                    if (!this.isDestroyed && currentConnectionId === this.connectionId) {
                        this.connectWebSocket(symbol);
                    }
                }, 3000);
            };

        } catch (error) {
            console.error('WebSocket connection error:', error);
        }
    }

    // üéØ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏) –° –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–ï–ô
    // üîí –í–ê–ñ–ù–û: –¢–∏–∫–∏ –¢–û–õ–¨–ö–û –æ–±–Ω–æ–≤–ª—è—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤–µ—á—É, –ù–ï —Å–æ–∑–¥–∞—é—Ç –Ω–æ–≤—ã–µ!
    // –ù–æ–≤—ã–µ —Å–≤–µ—á–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ handleNewCandle()
    handleTick(data) {
        const { price, time } = data;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        this.currentPrice = price;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã (—Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É, –Ω–µ –∫–∞–∂–¥—ã–π —Ç–∏–∫!)
        const now = Date.now();
        if (!this.lastPriceLineUpdate || now - this.lastPriceLineUpdate > 1000) {
            this.updatePriceLine(price);
            this.lastPriceLineUpdate = now;
        }

        // üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const lastCandle = this.candles[this.candles.length - 1];
        
        if (!lastCandle) {
            // –°–≤–µ—á–∏ –µ—â–µ –Ω–µ—Ç - –∂–¥–µ–º —Å–µ—Ä–≤–µ—Ä (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)
            return;
        }

        // üéØ –ï–î–ò–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –ü–†–ê–í–î–´: –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤–µ—á—É
        const updatedCandle = {
            time: lastCandle.time,
            open: lastCandle.open,
            high: Math.max(lastCandle.high, price),
            low: Math.min(lastCandle.low, price),
            close: price
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—Å—Å–∏–≤–µ
        this.candles[this.candles.length - 1] = updatedCandle;
        this.currentCandle = updatedCandle;

        // üéØ –ü–õ–ê–í–ù–ê–Ø –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø: –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –Ω–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if (this.interpolationEnabled && this.chartType !== 'line') {
            const fromCandle = this.currentInterpolatedCandle || lastCandle;
            this.startInterpolation(fromCandle, updatedCandle);
            this.lastTickTime = now;
        } else {
            // –ë–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
            this.updateActiveSeries(updatedCandle, price);
        }
    }

    // üéØ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏ –æ—Ç –°–ï–†–í–ï–†–ê
    // üîí –ï–î–ò–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –ü–†–ê–í–î–´: –¢–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–≤–µ—á–∏!
    handleNewCandle(data) {
        const { candle, timeframe } = data;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–≤–µ—á–∞ –Ω–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        if (timeframe !== this.timeframe) {
            return;
        }

        // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è - —á–∏—Å–ª–æ
        if (typeof candle.time !== 'number' || isNaN(candle.time)) {
            console.error('‚ùå Invalid candle time format:', candle.time);
            return;
        }

        console.log(`üïØÔ∏è New ${timeframe} candle completed:`, candle);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –≤ –º–∞—Å—Å–∏–≤–µ
        const lastCandle = this.candles[this.candles.length - 1];
        
        if (lastCandle && lastCandle.time === candle.time) {
            // üîÑ –°–≤–µ—á–∞ —É–∂–µ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            this.candles[this.candles.length - 1] = candle;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏)
            this.applyTickDirectly(candle, false);
        } else {
            // ‚ú® –ù–æ–≤–∞—è —Å–≤–µ—á–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            this.candles.push(candle);
            
            // üéØ –£–í–ï–õ–ò–ß–ï–ù –õ–ò–ú–ò–¢: 20000 —Å–≤–µ—á–µ–π (–±—ã–ª–æ 1000)
            if (this.candles.length > 20000) {
                this.candles.shift();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏)
            this.applyTickDirectly(candle, true);
        }

        // üéØ –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –°–õ–ï–î–£–Æ–©–£–Æ –ø—É—Å—Ç—É—é —Å–≤–µ—á—É –¥–ª—è —Ç–∏–∫–æ–≤
        const timeframeSeconds = this.getTimeframeSeconds(timeframe);
        const nextCandleTime = candle.time + timeframeSeconds;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ –µ—â–µ –Ω–µ—Ç
        const lastCandleAfter = this.candles[this.candles.length - 1];
        if (!lastCandleAfter || lastCandleAfter.time < nextCandleTime) {
            const nextCandle = {
                time: nextCandleTime,
                open: candle.close,
                high: candle.close,
                low: candle.close,
                close: candle.close
            };
            
            this.candles.push(nextCandle);
            this.currentCandle = nextCandle;
            this.currentInterpolatedCandle = { ...nextCandle };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
            this.applyTickDirectly(nextCandle, true);
            
            console.log(`üìä Created next candle: ${new Date(nextCandleTime * 1000).toISOString()}`);
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–≤–µ—á–∏
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!)
    updatePriceLine(price) {
        if (!price || !this.candleSeries) return;

        // –ï—Å–ª–∏ –ª–∏–Ω–∏–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
        if (!this.expirationPriceLine) {
            this.expirationPriceLine = this.candleSeries.createPriceLine({
                price: price,
                color: '#2962FF',
                lineWidth: 2,
                lineStyle: LightweightCharts.LineStyle.Solid,
                axisLabelVisible: true,
                title: '',
            });
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–∏–Ω–∏—é (–±—ã—Å—Ç—Ä–æ!)
            this.expirationPriceLine.applyOptions({ price: price });
        }
    }

    // üéØ –ù–û–í–û–ï: –°–º–µ–Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–≥–æ–π JSON!)
    async setTimeframe(timeframe) {
        if (timeframe === this.timeframe) return;

        console.log(`‚è±Ô∏è Changing timeframe to ${timeframe}`);

        this.timeframe = timeframe;
        localStorage.setItem('chartTimeframe', timeframe);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        await this.loadHistoricalData(this.symbol, timeframe);

        // WebSocket –£–ñ–ï –ø–æ–¥–∫–ª—é—á–µ–Ω (—Ç–∏–∫–∏ —Ç–µ –∂–µ!)
        // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
        if (this.chartType !== 'line' && window.chartTimeframeManager) {
            window.chartTimeframeManager.setTimeframe(timeframe, (formatted, timeLeft, tf) => {
                this.updateExpirationOverlay(tf, formatted, timeLeft);
            });
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
    setChartType(type) {
        if (type === this.chartType) return;

        console.log(`üìä Changing chart type to ${type}`);

        this.chartType = type;
        localStorage.setItem('chartType', type);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
        this.applySeries();

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
        if (type === 'line') {
            // –î–ª—è –ª–∏–Ω–∏–∏ - —Ç–∞–π–º—Ñ—Ä–µ–π–º –Ω–µ –≤–∞–∂–µ–Ω
            if (window.chartTimeframeManager) {
                window.chartTimeframeManager.stopExpirationTimer();
            }
            // –û—á–∏—â–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
            this.updateExpirationOverlay(null, '', 0);
        } else {
            // –î–ª—è candles/bars - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            if (window.chartTimeframeManager) {
                window.chartTimeframeManager.setTimeframe(this.timeframe, (formatted, timeLeft, tf) => {
                    this.updateExpirationOverlay(tf, formatted, timeLeft);
                });
            }
        }
    }

    // üéØ –ù–û–í–û–ï: –°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞ (–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é + –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º WebSocket)
    async changeSymbol(newSymbol) {
        if (newSymbol === this.symbol) return;

        console.log(`üîÑ Changing symbol to ${newSymbol}`);

        this.symbol = newSymbol;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é
        await this.loadHistoricalData(newSymbol, this.timeframe);

        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –∫ –Ω–æ–≤–æ–º—É —Å–∏–º–≤–æ–ª—É
        this.connectWebSocket(newSymbol);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è —Å —Ç–∞–π–º–µ—Ä–æ–º —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
    updateExpirationOverlay(timeframe, formattedTime, timeLeft) {
        const overlayEl = document.getElementById('expiration-overlay');
        if (!overlayEl) return;

        if (!timeframe || timeLeft === 0) {
            overlayEl.style.display = 'none';
            return;
        }

        overlayEl.style.display = 'flex';
        overlayEl.innerHTML = `
            <div class="expiration-badge">
                <div class="expiration-timeframe">${timeframe}</div>
                <div class="expiration-timer">${formattedTime}</div>
            </div>
        `;
    }

    // üéØ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Ä–∏—é –≥—Ä–∞—Ñ–∏–∫–∞ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!)
    updateActiveSeries(candle, price) {
        if (!candle) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—É—é —Å–µ—Ä–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        if (this.chartType === 'line') {
            this.lineSeries.update({ time: candle.time, value: price });
        } else if (this.chartType === 'bars') {
            this.barSeries.update(candle);
        } else {
            // candles (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            this.candleSeries.update(candle);
        }
    }

    // üé® –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø - —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    calculateInterpolationDuration() {
        if (!window.chartTimeframeManager) {
            return this.baseInterpolationDuration;
        }
        
        const timeframeDuration = window.chartTimeframeManager.getTimeframeDuration(this.timeframe);
        
        // –î–ª—è S5 (5 —Å–µ–∫) –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å 300ms
        // –î–ª—è –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        const ratio = timeframeDuration / 5; // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ S5
        const scaledDuration = this.baseInterpolationDuration * Math.pow(ratio, 0.7);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–æ 3000ms
        return Math.min(scaledDuration, 3000);
    }

    // üé® –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø - –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –º–µ–∂–¥—É —Ç–∏–∫–∞–º–∏ (60fps)
    startInterpolation(fromCandle, toCandle) {
        if (!this.interpolationEnabled || !fromCandle || !toCandle) {
            return;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        this.interpolationDuration = this.calculateInterpolationDuration();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentInterpolatedCandle = { ...fromCandle };
        this.targetCandle = { ...toCandle };
        this.interpolationStartTime = performance.now();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        this.animate();
    }

    // üé® –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø - –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª (60fps —á–µ—Ä–µ–∑ requestAnimationFrame)
    animate() {
        if (!this.interpolationEnabled || !this.targetCandle || !this.currentInterpolatedCandle) {
            return;
        }
        
        const now = performance.now();
        const elapsed = now - this.interpolationStartTime;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (0.0 - 1.0)
        const progress = Math.min(elapsed / this.interpolationDuration, 1.0);
        
        // Easing function –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (easeOutQuad - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç, –ø–ª–∞–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
        const eased = 1 - Math.pow(1 - progress, 2);
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º OHLC –∑–Ω–∞—á–µ–Ω–∏—è
        const interpolated = {
            time: this.targetCandle.time,
            open: this.currentInterpolatedCandle.open, // open –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            high: this.lerp(this.currentInterpolatedCandle.high, this.targetCandle.high, eased),
            low: this.lerp(this.currentInterpolatedCandle.low, this.targetCandle.low, eased),
            close: this.lerp(this.currentInterpolatedCandle.close, this.targetCandle.close, eased)
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        try {
            const activeSeries = this.getActiveSeries();
            if (activeSeries && this.chartType !== 'line') {
                activeSeries.update(interpolated);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
            this.updatePriceDisplay(interpolated.close);
        } catch (error) {
            console.error('Animation error:', error);
            return;
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (progress < 1.0) {
            this.currentInterpolatedCandle = interpolated;
            this.animationFrameId = requestAnimationFrame(() => this.animate());
        } else {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.currentInterpolatedCandle = this.targetCandle;
            this.animationFrameId = null;
        }
    }

    // üé® –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø - –ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    lerp(start, end, t) {
        return start + (end - start) * t;
    }

    // üöÄ –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–∏ –ë–ï–ó –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (–¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤)
    applyTickDirectly(candle, isNewCandle) {
        const activeSeries = this.getActiveSeries();
        if (!activeSeries) {
            return;
        }
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
            activeSeries.update(candle);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
            this.updatePriceDisplay(candle.close);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
            this.currentInterpolatedCandle = { ...candle };
        } catch (error) {
            console.error('Error applying tick directly:', error);
        }
    }

    // üéØ –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    getTimeframeSeconds(timeframe) {
        const timeframes = {
            'S5': 5,
            'S10': 10,
            'S15': 15,
            'S30': 30,
            'M1': 60,
            'M2': 120,
            'M3': 180,
            'M5': 300,
            'M10': 600,
            'M15': 900,
            'M30': 1800
        };
        return timeframes[timeframe] || 5;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
    updatePriceDisplay(price) {
        const priceEl = document.getElementById('current-price');
        if (priceEl) {
            priceEl.textContent = price.toFixed(4);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            priceEl.classList.remove('price-up', 'price-down');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            const prevPrice = parseFloat(priceEl.dataset.prevPrice || price);
            if (price > prevPrice) {
                priceEl.classList.add('price-up');
            } else if (price < prevPrice) {
                priceEl.classList.add('price-down');
            }
            
            priceEl.dataset.prevPrice = price;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ª–∏–Ω–∏–∏ —Ü–µ–Ω—ã
        this.currentPrice = price;
    }

    // –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Ä–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    getActiveSeries() {
        switch (this.chartType) {
            case 'line':
                return this.lineSeries;
            case 'bars':
                return this.barSeries;
            case 'candles':
            default:
                return this.candleSeries;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å–∞–π–∑–∞
    handleResize() {
        if (!this.chart) return;

        const chartContainer = document.getElementById('chart');
        if (!chartContainer) return;

        const parentContainer = chartContainer.parentElement;
        const width = parentContainer ? parentContainer.clientWidth : chartContainer.clientWidth;
        const height = parentContainer ? parentContainer.clientHeight : chartContainer.clientHeight;

        this.chart.resize(width, height);
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket
    disconnectWebSocket() {
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
            this.reconnectTimer = null;
        }

        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }

        this.connectionId++;
    }

    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ
    destroy() {
        this.isDestroyed = true;
        
        // üéØ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
        }
        
        this.disconnectWebSocket();

        if (window.chartTimeframeManager) {
            window.chartTimeframeManager.stopExpirationTimer();
        }

        if (this.chart) {
            this.chart.remove();
            this.chart = null;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.chartManager = new ChartManager();

console.log('üìä Chart Manager initialized');
