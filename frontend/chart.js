// Chart management module
// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º

class ChartManager {
    constructor() {
        this.chart = null;
        this.candleSeries = null;
        this.lineSeries = null; // –¥–ª—è Line –≥—Ä–∞—Ñ–∏–∫–∞
        this.barSeries = null; // –¥–ª—è Bars –≥—Ä–∞—Ñ–∏–∫–∞
        this.volumeSeries = null;
        this.ws = null;
        this.symbol = 'USD_MXN_OTC';
        this.isInitialized = false;
        this.isUserInteracting = false; // —Ñ–ª–∞–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.lastUpdateTime = 0; // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.updateThrottle = 16; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (ms) - 60fps –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        this.lastCandle = null; // –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        this.candleCount = 0; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        this.isDestroyed = false; // —Ñ–ª–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.reconnectTimer = null; // —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        this.connectionId = 0; // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        this.processedCandles = new Set(); // —Å–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        this.MAX_CANDLES_IN_MEMORY = 120960; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ 7 –¥–Ω–µ–π –ø–æ 5-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π
        
        // –ù–û–í–û–ï: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
        this.chartType = localStorage.getItem('chartType') || 'candles'; // 'line', 'candles', 'bars'
        this.timeframe = localStorage.getItem('chartTimeframe') || 'S5'; // —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
        this.currentCandleByTimeframe = null; // —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        
        // –†–ï–®–ï–ù–ò–ï #6: Debounce –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        this.scrollDebounceTimer = null;
        this.pendingScrollRange = null;
        
        // –†–ï–®–ï–ù–ò–ï #1: –ö–æ–Ω—Ç—Ä–æ–ª—å autoScale
        this.isAdjustingScale = false;
        
        // –¢–∞–π–º–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ —Ü–µ–Ω—ã
        this.initialAnimationTimer = null;
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏—è
        this.MIN_VISIBLE_BARS = 10; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        this.isRestoringRange = false; // —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        
        // üéØ –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø –î–õ–Ø –ü–õ–ê–í–ù–û–°–¢–ò (smooth transitions between ticks)
        this.interpolationEnabled = true; // –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
        this.targetCandle = null; // —Ü–µ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—á–∏ (–∫—É–¥–∞ –¥–≤–∏–∂–µ–º—Å—è)
        this.currentInterpolatedCandle = null; // —Ç–µ–∫—É—â–µ–µ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.interpolationStartTime = null; // –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        this.interpolationDuration = 300; // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (ms) - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        this.baseInterpolationDuration = 300; // –±–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è S5 (5 —Å–µ–∫—É–Ω–¥)
        this.animationFrameId = null; // ID –¥–ª—è requestAnimationFrame
        this.lastTickTime = 0; // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        
        // –õ–∏–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å–ø—Ä–∞–≤–∞ –Ω–∞ –æ—Å–∏ Y
        this.currentPrice = null; // —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        this.expirationPriceLine = null; // PriceLine –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–Ω–∏–∏ –∏ —Ü–µ–Ω—ã —Å–ø—Ä–∞–≤–∞ (–Ω–∞ –æ—Å–∏ Y)
        
        // üöÄ PAGE VISIBILITY: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        this.isPageVisible = !document.hidden; // —Ñ–ª–∞–≥ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.tickQueue = []; // –æ—á–µ—Ä–µ–¥—å —Ç–∏–∫–æ–≤ –Ω–∞ —Å–∫—Ä—ã—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ
        this.lastVisibleTime = Date.now(); // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –≤–∏–¥–∏–º–æ–π –≤–∫–ª–∞–¥–∫–µ
        this.IDLE_THRESHOLD = 1000; // –ø–æ—Ä–æ–≥ –ø—Ä–æ—Å—Ç–æ—è (1 —Å–µ–∫) - –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –µ—Å–ª–∏ –±–æ–ª—å—à–µ
        
        // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ê–ù–û–ú–ê–õ–ò–ô: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≤–µ—á–µ–π
        this.MAX_CANDLE_RANGE_PERCENT = 0.03; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö —Å–≤–µ—á–∏ (3% –æ—Ç basePrice)
        this.basePrice = null; // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        // üéØ –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ü–ï–†–í–û–ì–û –¢–ò–ö–ê: –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–∞
        this.isFirstTickAfterChange = false;
        this.changeSymbolDebugMode = false; // Debug —Ä–µ–∂–∏–º –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–∫—Ç–∏–≤–∞
        this.changeSymbolDebugTimer = null;
        
        // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ RACE CONDITION: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–∏–∫–æ–≤ –¥–æ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.isInitializingSymbol = false; // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞
        this.pendingTicks = []; // –û—á–µ—Ä–µ–¥—å —Ç–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.lastHistoricalCandle = null; // –ü–æ—Å–ª–µ–¥–Ω—è—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–≤–µ—á–∞ –¥–ª—è —É–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    init() {
        const chartContainer = document.getElementById('chart');
        if (!chartContainer) {
            console.error('Chart container not found');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        const parentContainer = chartContainer.parentElement;
        const width = parentContainer ? parentContainer.clientWidth : chartContainer.clientWidth;
        const height = parentContainer ? parentContainer.clientHeight : chartContainer.clientHeight;

        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
        this.chart = LightweightCharts.createChart(chartContainer, {
            width: width,
            height: height,
            layout: {
                background: { color: '#1a1f2e' },
                textColor: '#a0aec0',
            },
            grid: {
                vertLines: { color: '#2d3748' },
                horzLines: { color: '#2d3748' },
            },
            crosshair: {
                mode: LightweightCharts.CrosshairMode.Normal,
            },
            rightPriceScale: {
                borderColor: '#2d3748',
                scaleMargins: {
                    top: 0.1, // 10% –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
                    bottom: 0.1, // 10% –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
                },
                mode: LightweightCharts.PriceScaleMode.Normal,
                autoScale: true, // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                alignLabels: true,
            },
            timeScale: {
                borderColor: '#2d3748',
                timeVisible: true,
                secondsVisible: true,
                barSpacing: 8, // –î–µ–ª–∞–µ–º —Å–≤–µ—á–∏ —Ç–æ–ª—â–µ
                minBarSpacing: 4, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –æ—Ç–¥–∞–ª–µ–Ω–∏–∏
                rightOffset: 50, // –£–≤–µ–ª–∏—á–µ–Ω –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                lockVisibleTimeRangeOnResize: true,
            },
        });

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é —Å–≤–µ—á–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        this.candleSeries = this.chart.addCandlestickSeries({
            upColor: '#26d07c',
            downColor: '#ff4757',
            borderUpColor: '#26d07c',
            borderDownColor: '#ff4757',
            wickUpColor: '#26d07c',
            wickDownColor: '#ff4757',
            priceLineVisible: false,
            lastValueVisible: false, // –û—Ç–∫–ª—é—á–µ–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ª–∏–Ω–∏–µ–π —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            priceFormat: {
                type: 'price',
                precision: 4,
                minMove: 0.0001,
            },
            visible: this.chartType === 'candles',
        });
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é –ª–∏–Ω–∏–π –¥–ª—è Line –≥—Ä–∞—Ñ–∏–∫–∞
        this.lineSeries = this.chart.addLineSeries({
            color: '#4f9fff',
            lineWidth: 2,
            priceLineVisible: false,
            lastValueVisible: false, // –û—Ç–∫–ª—é—á–µ–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ª–∏–Ω–∏–µ–π —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            priceFormat: {
                type: 'price',
                precision: 4,
                minMove: 0.0001,
            },
            visible: this.chartType === 'line',
        });
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é –±–∞—Ä–æ–≤ –¥–ª—è Bars –≥—Ä–∞—Ñ–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º candlestick —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)
        this.barSeries = this.chart.addCandlestickSeries({
            upColor: '#26d07c',
            downColor: '#ff4757',
            borderUpColor: '#26d07c',
            borderDownColor: '#ff4757',
            wickUpColor: '#26d07c',
            wickDownColor: '#ff4757',
            priceLineVisible: false,
            lastValueVisible: false, // –û—Ç–∫–ª—é—á–µ–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ª–∏–Ω–∏–µ–π —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            priceFormat: {
                type: 'price',
                precision: 4,
                minMove: 0.0001,
            },
            visible: this.chartType === 'bars',
        });

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é –æ–±—ä–µ–º–æ–≤ (—Å–∫—Ä—ã—Ç–∞)
        this.volumeSeries = this.chart.addHistogramSeries({
            color: '#26a69a',
            priceFormat: {
                type: 'volume',
            },
            priceScaleId: '', // –æ—Ç–¥–µ–ª—å–Ω–∞—è —à–∫–∞–ª–∞
            scaleMargins: {
                top: 0.8,
                bottom: 0,
            },
            visible: false, // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ä–µ–º—ã
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ —Å –¥–µ–±–∞—É–Ω—Å–æ–º
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                if (this.chart && chartContainer) {
                    const parentContainer = chartContainer.parentElement;
                    const width = parentContainer ? parentContainer.clientWidth : chartContainer.clientWidth;
                    const height = parentContainer ? parentContainer.clientHeight : chartContainer.clientHeight;
                    
                    this.chart.applyOptions({
                        width: width,
                        height: height,
                    });
                }
            }, 100);
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        chartContainer.addEventListener('mousedown', () => {
            this.isUserInteracting = true;
        });
        
        chartContainer.addEventListener('mouseup', () => {
            setTimeout(() => {
                this.isUserInteracting = false;
            }, 100);
        });
        
        chartContainer.addEventListener('touchstart', () => {
            this.isUserInteracting = true;
        });
        
        chartContainer.addEventListener('touchend', () => {
            setTimeout(() => {
                this.isUserInteracting = false;
            }, 100);
        });
        
        chartContainer.addEventListener('wheel', () => {
            this.isUserInteracting = true;
            setTimeout(() => {
                this.isUserInteracting = false;
            }, 200);
        });
        
        // –£–°–ò–õ–ï–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –°–•–õ–û–ü–´–í–ê–ù–ò–Ø –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        this.chart.timeScale().subscribeVisibleLogicalRangeChange((range) => {
            if (!range || this.isRestoringRange || !this.isInitialized) return;
            
            // –£–õ–£–ß–®–ï–ù–ò–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if (range.from < 0 || range.to < 0 || range.from >= range.to) {
                window.errorLogger?.error('range', 'Invalid range detected!', {
                    range: range,
                    candleCount: this.candleCount
                });
                console.error('Invalid range detected:', range);
                this.isRestoringRange = true;
                setTimeout(() => {
                    this.chart.timeScale().fitContent();
                    this.isRestoringRange = false;
                }, 50);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ
            const visibleBars = range.to - range.from;
            const rightOffsetBars = 50;
            const pureVisibleBars = visibleBars - rightOffsetBars;
            
            if (pureVisibleBars < this.MIN_VISIBLE_BARS) {
                window.errorLogger?.error('range', 'Chart collapse detected! Restoring safe range...', {
                    currentRange: { from: range.from, to: range.to },
                    visibleBars: visibleBars,
                    pureVisibleBars: pureVisibleBars,
                    minRequired: this.MIN_VISIBLE_BARS,
                    candleCount: this.candleCount
                });
                console.error('Chart collapse detected! Range too narrow:', pureVisibleBars, 'bars');
                
                // –£–õ–£–ß–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º candleCount –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                const safeVisibleBars = 100; // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π
                if (this.candleCount < safeVisibleBars) {
                    window.errorLogger?.warn('range', 'Not enough candles for safe range, using fitContent', {
                        candleCount: this.candleCount,
                        safeVisibleBars: safeVisibleBars
                    });
                    this.isRestoringRange = true;
                    setTimeout(() => {
                        this.chart.timeScale().fitContent();
                        this.isRestoringRange = false;
                    }, 50);
                    return;
                }
                
                const safeRange = {
                    from: Math.max(0, this.candleCount - safeVisibleBars),
                    to: this.candleCount - 1 + rightOffsetBars
                };
                
                window.errorLogger?.info('range', 'Restoring safe range', { 
                    safeRange,
                    candleCount: this.candleCount
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
                this.isRestoringRange = true;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(() => {
                    try {
                        this.chart.timeScale().setVisibleLogicalRange(safeRange);
                    } catch (error) {
                        window.errorLogger?.error('range', 'Failed to restore range', {
                            error: error.message,
                            safeRange: safeRange
                        });
                        console.error('Failed to restore range:', error);
                    }
                    setTimeout(() => {
                        this.isRestoringRange = false;
                    }, 100);
                }, 0);
            }
        });

        // üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.initPageVisibilityTracking();

        this.isInitialized = true;
        window.errorLogger?.info('chart', 'Chart initialized successfully', {
            width: width,
            height: height,
            rightOffset: 12,
            pageVisible: this.isPageVisible
        });
        console.log('Chart initialized');
    }

    // üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º visibilitychange (–æ—Å–Ω–æ–≤–Ω–æ–π) + focus/blur (–∑–∞–ø–∞—Å–Ω–æ–π) –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    initPageVisibilityTracking() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const handleVisibilityChange = () => {
            const wasVisible = this.isPageVisible;
            this.isPageVisible = document.visibilityState === 'visible';
            
            window.errorLogger?.info('visibility', 'Page visibility changed', {
                from: wasVisible ? 'visible' : 'hidden',
                to: this.isPageVisible ? 'visible' : 'hidden',
                visibilityState: document.visibilityState
            });
            
            if (!this.isPageVisible) {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RAF
                this.handlePageHidden();
            } else if (wasVisible === false && this.isPageVisible) {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º
                this.handlePageVisible();
            }
        };
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º)
        const handleBlur = () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞
            if (document.visibilityState === 'hidden' && this.isPageVisible) {
                window.errorLogger?.debug('visibility', 'Blur event - page is hidden');
                this.isPageVisible = false;
                this.handlePageHidden();
            }
        };
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º)
        const handleFocus = () => {
            if (document.visibilityState === 'visible' && !this.isPageVisible) {
                window.errorLogger?.debug('visibility', 'Focus event - page is visible');
                this.isPageVisible = true;
                this.handlePageVisible();
            }
        };
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('visibilitychange', handleVisibilityChange);
        window.addEventListener('blur', handleBlur);
        window.addEventListener('focus', handleFocus);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        this.visibilityHandlers = {
            visibilitychange: handleVisibilityChange,
            blur: handleBlur,
            focus: handleFocus
        };
        
        window.errorLogger?.info('visibility', 'Page visibility tracking initialized', {
            initialState: this.isPageVisible ? 'visible' : 'hidden'
        });
        console.log('üì± Page visibility tracking enabled');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    handlePageHidden() {
        window.errorLogger?.info('visibility', 'Page hidden - stopping RAF, clearing queue', {
            tickQueueSize: this.tickQueue.length,
            animationActive: !!this.animationFrameId
        });
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º requestAnimationFrame
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
            window.errorLogger?.debug('visibility', 'RAF cancelled');
        }
        
        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ç–∏–∫–æ–≤ (—Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã)
        this.tickQueue = [];
        
        console.log('üì¥ Chart animations paused (page hidden)');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    handlePageVisible() {
        this.lastVisibleTime = Date.now();
        
        window.errorLogger?.info('visibility', 'Page visible - resuming normal operation', {
            tickQueueSize: this.tickQueue.length
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (this.tickQueue.length > 0) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ—Å—Ç–∞–ª—å–Ω–æ–µ —É—Å—Ç–∞—Ä–µ–ª–æ)
            const latestTick = this.tickQueue[this.tickQueue.length - 1];
            
            window.errorLogger?.debug('visibility', 'Applying queued ticks', {
                queueSize: this.tickQueue.length,
                applied: 'latest only'
            });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (–ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è)
            this.applyTickDirectly(latestTick.candle, latestTick.isNewCandle);
            
            // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            this.tickQueue = [];
        }
        
        console.log('‚úÖ Chart animations resumed (page visible)');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    async loadHistoricalData(symbol) {
        try {
            const API_URL = window.location.origin.includes('localhost')
                ? 'http://localhost:3001'
                : window.location.origin;

            const response = await fetch(`${API_URL}/api/chart/history?symbol=${symbol}`);
            if (!response.ok) {
                throw new Error('Failed to fetch chart data');
            }

            const result = await response.json();
            const data = result.data;

            if (!data || data.length === 0) {
                console.warn('No chart data received');
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            if (this.chartType === 'line') {
                // –î–ª—è Line –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OHLC –≤ –ø—Ä–æ—Å—Ç—ã–µ —Ç–æ—á–∫–∏
                const lineData = data.map(candle => ({
                    time: candle.time,
                    value: candle.close
                }));
                this.lineSeries.setData(lineData);
            } else if (this.chartType === 'candles') {
                this.candleSeries.setData(data);
            } else if (this.chartType === 'bars') {
                this.barSeries.setData(data);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
            this.candleCount = data.length;
            if (data.length > 0) {
                this.lastCandle = data[data.length - 1];
                // üéØ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å–≤–µ—á—É –¥–ª—è —É–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                this.lastHistoricalCandle = { ...this.lastCandle };
                
                // üõ°Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º basePrice –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–≤–µ—á–µ–π)
                const firstCandles = data.slice(0, Math.min(100, data.length));
                const avgPrice = firstCandles.reduce((sum, c) => sum + c.close, 0) / firstCandles.length;
                this.basePrice = avgPrice;
                
                window.errorLogger?.info('chart', 'Base price and lastHistoricalCandle set', {
                    symbol,
                    basePrice: this.basePrice,
                    lastHistoricalCandle: this.lastHistoricalCandle,
                    maxAllowedRange: (this.basePrice * this.MAX_CANDLE_RANGE_PERCENT).toFixed(4)
                });
            }
            
            // –û—á–∏—â–∞–µ–º —Å–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this.processedCandles.clear();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–º–æ–≤
            const volumeData = data.map(candle => ({
                time: candle.time,
                value: candle.volume,
                color: candle.close >= candle.open ? '#26d07c80' : '#ff475780'
            }));
            this.volumeSeries.setData(volumeData);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            window.errorLogger?.info('chart', 'Historical data loaded', {
                candleCount: data.length,
                symbol: symbol,
                firstTime: data[0]?.time,
                lastTime: data[data.length - 1]?.time
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–Ω–∏–∏ —Ü–µ–Ω—ã
            if (data.length > 0) {
                this.currentPrice = data[data.length - 1].close;
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                // –ò –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ª–∏–Ω–∏–∏
                if (this.chartType !== 'line') {
                    this.createExpirationOverlay();
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ-—Å–∏–º—É–ª—è—Ü–∏—é –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–∫–∞
                    this.startInitialPriceAnimation();
                }
            }
            
            this.chart.timeScale().fitContent();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ~100 —Å–≤–µ—á–µ–π)
            if (data.length > 0) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ (rightOffset –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
                const rightOffsetBars = 50; // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç rightOffset –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                const visibleLogicalRange = {
                    from: Math.max(0, data.length - 100),
                    to: data.length - 1 + rightOffsetBars
                };
                this.chart.timeScale().setVisibleLogicalRange(visibleLogicalRange);
            }

            console.log(`Loaded ${data.length} candles for ${symbol}`);
        } catch (error) {
            window.errorLogger?.error('chart', 'Error loading historical data', {
                error: error.message,
                stack: error.stack,
                symbol: symbol
            });
            console.error('Error loading historical data:', error);
        }
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
    connectWebSocket(symbol) {
        const wsUrl = window.location.origin.includes('localhost')
            ? 'ws://localhost:3001/ws/chart'
            : `ws://${window.location.host}/ws/chart`;

        try {
            // –ü–†–û–ë–õ–ï–ú–ê WebSocket –†–ï–®–ï–ù–ê: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                window.errorLogger?.info('websocket', 'Reusing existing connection for symbol change', { 
                    oldSymbol: this.symbol,
                    newSymbol: symbol
                });
                
                // –Ø–≤–Ω—ã–π unsubscribe –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                if (this.symbol && this.symbol !== symbol) {
                    this.ws.send(JSON.stringify({
                        type: 'unsubscribe',
                        symbol: this.symbol
                    }));
                }
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª
                this.symbol = symbol;
                this.ws.send(JSON.stringify({
                    type: 'subscribe',
                    symbol: symbol
                }));
                return;
            }
            
            // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            this.closeWebSocket();
            
            // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ pending –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (this.reconnectTimer) {
                clearTimeout(this.reconnectTimer);
                this.reconnectTimer = null;
            }
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            this.connectionId++;
            const currentConnectionId = this.connectionId;
            
            this.ws = new WebSocket(wsUrl);
            
            window.errorLogger?.info('websocket', 'Creating new WebSocket connection', { 
                symbol,
                wsUrl,
                connectionId: currentConnectionId,
                readyState: this.ws.readyState 
            });

            this.ws.onopen = () => {
                window.errorLogger?.info('websocket', 'WebSocket connected', { symbol });
                console.log('WebSocket connected');
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª
                this.ws.send(JSON.stringify({
                    type: 'subscribe',
                    symbol: symbol
                }));
            };

            this.ws.onmessage = (event) => {
                try {
                    // –ó–ê–©–ò–¢–ê: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    if (currentConnectionId !== this.connectionId) {
                        window.errorLogger?.warn('websocket', 'Ignoring message from old connection', {
                            messageConnectionId: currentConnectionId,
                            currentConnectionId: this.connectionId
                        });
                        return;
                    }
                    
                    const message = JSON.parse(event.data);

                    if (message.type === 'subscribed') {
                        console.log(`Subscribed to ${message.symbol}`);
                        window.errorLogger?.info('websocket', 'Subscription confirmed', { 
                            symbol: message.symbol,
                            connectionId: currentConnectionId
                        });
                    } else if (message.type === 'unsubscribed') {
                        console.log(`Unsubscribed from ${message.symbol}`);
                        window.errorLogger?.info('websocket', 'Unsubscription confirmed', { 
                            symbol: message.symbol
                        });
                    } else if (message.type === 'tick') {
                        // –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —Ç–∏–∫–æ–≤)
                        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∫–∞
                        if (this.initialAnimationTimer) {
                            clearInterval(this.initialAnimationTimer);
                            this.initialAnimationTimer = null;
                            window.errorLogger?.debug('animation', 'Initial animation stopped - real tick received');
                        }
                        this.updateCandle(message.data, false);
                    } else if (message.type === 'newCandle') {
                        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–≤–µ—á–∏
                        // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç—É —Å–≤–µ—á—É –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏
                        const candleKey = `${message.data.time}-${message.symbol || this.symbol}`;
                        if (this.processedCandles.has(candleKey)) {
                            window.errorLogger?.warn('websocket', 'Duplicate new candle detected - skipping', {
                                candleKey,
                                time: message.data.time
                            });
                            return;
                        }
                        this.processedCandles.add(candleKey);
                        
                        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä Set –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
                        if (this.processedCandles.size > 10000) {
                            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                            const entries = Array.from(this.processedCandles);
                            this.processedCandles = new Set(entries.slice(-5000));
                        }
                        
                        this.updateCandle(message.data, true);
                    } else if (message.type === 'candle') {
                        // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                        this.updateCandle(message.data, false);
                    }
                } catch (error) {
                    window.errorLogger?.error('websocket', 'Error processing WebSocket message', {
                        error: error.message,
                        stack: error.stack
                    });
                    console.error('Error processing WebSocket message:', error);
                }
            };

            this.ws.onerror = (error) => {
                window.errorLogger?.error('websocket', 'WebSocket error', { 
                    error: String(error),
                    symbol: symbol
                });
                console.error('WebSocket error:', error);
            };

            this.ws.onclose = (event) => {
                window.errorLogger?.info('websocket', 'WebSocket closed', { 
                    symbol,
                    code: event.code,
                    reason: event.reason,
                    wasClean: event.wasClean,
                    isDestroyed: this.isDestroyed
                });
                console.log('WebSocket disconnected');
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                // –∏–ª–∏ –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∏–º–≤–æ–ª–∞)
                if (this.isDestroyed || !this.isInitialized) {
                    window.errorLogger?.info('websocket', 'Not reconnecting - component destroyed or not initialized');
                    return;
                }
                
                // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
                if (event.code !== 1000) { // 1000 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                    window.errorLogger?.info('websocket', 'Scheduling reconnect after abnormal close');
                    this.reconnectTimer = setTimeout(() => {
                        if (this.isInitialized && !this.isDestroyed) {
                            console.log('Reconnecting WebSocket...');
                            this.connectWebSocket(this.symbol); // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª
                        }
                    }, 5000);
                }
            };
        } catch (error) {
            window.errorLogger?.error('websocket', 'Error connecting to WebSocket', {
                error: error.message,
                stack: error.stack,
                symbol: symbol
            });
            console.error('Error connecting to WebSocket:', error);
        }
    }

    // üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≤–µ—á–∏ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
    validateCandle(candle, context = 'unknown') {
        if (!candle) {
            window.errorLogger?.error('validation', 'Candle is null or undefined', { context });
            return { valid: false, reason: 'Null candle' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if (typeof candle.time !== 'number' || isNaN(candle.time)) {
            window.errorLogger?.error('validation', 'Invalid candle time', { candle, context });
            return { valid: false, reason: 'Invalid time' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ OHLC –∑–Ω–∞—á–µ–Ω–∏–π
        if (typeof candle.open !== 'number' || isNaN(candle.open) ||
            typeof candle.high !== 'number' || isNaN(candle.high) ||
            typeof candle.low !== 'number' || isNaN(candle.low) ||
            typeof candle.close !== 'number' || isNaN(candle.close)) {
            window.errorLogger?.error('validation', 'Invalid OHLC values', { candle, context });
            return { valid: false, reason: 'Invalid OHLC' };
        }
        
        // –ë–∞–∑–æ–≤–∞—è OHLC –ª–æ–≥–∏–∫–∞
        if (candle.high < candle.low || 
            candle.high < candle.open || 
            candle.high < candle.close ||
            candle.low > candle.open ||
            candle.low > candle.close) {
            window.errorLogger?.error('validation', 'OHLC logic violation', { candle, context });
            return { valid: false, reason: 'OHLC logic violation' };
        }
        
        // üî• –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –†–∞–∑–º–∞—Ö —Å–≤–µ—á–∏
        // üéØ –£–ú–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ï—Å–ª–∏ basePrice –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º lastHistoricalCandle
        let validationBasePrice = this.basePrice;
        
        if (!validationBasePrice && this.lastHistoricalCandle) {
            validationBasePrice = this.lastHistoricalCandle.close;
            window.errorLogger?.debug('validation', 'Using lastHistoricalCandle for validation', {
                symbol: this.symbol,
                validationBasePrice,
                context
            });
        }
        
        if (validationBasePrice) {
            const candleRange = candle.high - candle.low;
            const rangePercent = (candleRange / validationBasePrice);
            
            if (rangePercent > this.MAX_CANDLE_RANGE_PERCENT) {
                window.errorLogger?.error('validation', 'üö® ANOMALY DETECTED: Candle range too large!', {
                    candle,
                    context,
                    candleRange,
                    rangePercent: (rangePercent * 100).toFixed(2) + '%',
                    maxAllowed: (this.MAX_CANDLE_RANGE_PERCENT * 100).toFixed(2) + '%',
                    validationBasePrice,
                    usedLastHistorical: !this.basePrice,
                    symbol: this.symbol
                });
                
                console.error(`üö® ANOMALY: ${this.symbol} candle range ${(rangePercent * 100).toFixed(2)}% exceeds ${(this.MAX_CANDLE_RANGE_PERCENT * 100).toFixed(2)}%`, candle);
                
                return { 
                    valid: false, 
                    reason: 'Anomalous range',
                    rangePercent,
                    maxAllowed: this.MAX_CANDLE_RANGE_PERCENT
                };
            }
        } else {
            // –ù–µ—Ç basePrice –∏ –Ω–µ—Ç lastHistoricalCandle - –ø–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            window.errorLogger?.warn('validation', 'No basePrice or lastHistoricalCandle available - skipping range check', {
                symbol: this.symbol,
                context
            });
        }
        
        // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        return { valid: true };
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    updateCandle(candle, isNewCandle = false) {
        const activeSeries = this.getActiveSeries();
        if (!activeSeries || !this.volumeSeries) {
            window.errorLogger?.error('chart', 'updateCandle called but series not initialized');
            return;
        }
        
        // üõ°Ô∏è –ë–õ–û–ö–ò–†–û–í–ö–ê: –ï—Å–ª–∏ –∏–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫ –≤ –æ—á–µ—Ä–µ–¥—å
        if (this.isInitializingSymbol && !isNewCandle) {
            window.errorLogger?.debug('chart', 'üîí Symbol initializing - queueing tick', {
                symbol: this.symbol,
                tickTime: candle.time,
                queueSize: this.pendingTicks.length
            });
            
            this.pendingTicks.push({ candle, isNewCandle });
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–∏–∫–æ–≤)
            if (this.pendingTicks.length > 5) {
                this.pendingTicks = this.pendingTicks.slice(-5);
            }
            
            return; // –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú —Ç–∏–∫ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        }
        
        // üêõ DEBUG MODE: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Ç–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–∫—Ç–∏–≤–∞
        if (this.changeSymbolDebugMode) {
            window.errorLogger?.debug('chart-debug', 'Tick received in debug mode', {
                symbol: this.symbol,
                isNewCandle,
                candle,
                lastCandle: this.lastCandle,
                currentInterpolatedCandle: this.currentInterpolatedCandle,
                isFirstTickAfterChange: this.isFirstTickAfterChange,
                basePrice: this.basePrice,
                isInitializingSymbol: this.isInitializingSymbol
            });
        }
        
        // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—á—É –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        const validation = this.validateCandle(candle, isNewCandle ? 'newCandle' : 'tick');
        if (!validation.valid) {
            window.errorLogger?.error('chart', 'üö® Candle validation failed - REJECTING', {
                reason: validation.reason,
                candle,
                isNewCandle,
                symbol: this.symbol
            });
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–æ–º–∞–ª–∏—è –∏–∑-–∑–∞ —Ä–∞–∑–º–∞—Ö–∞ - –û–¢–ö–õ–û–ù–Ø–ï–ú –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
            if (validation.reason === 'Anomalous range') {
                console.error(`üö® ANOMALOUS CANDLE REJECTED: ${this.symbol}`, candle);
                
                // üõ°Ô∏è FALLBACK: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π
                this.cleanAnomalousCandles();
                
                // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return;
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return;
        }
        
        // –î–ª—è Line –≥—Ä–∞—Ñ–∏–∫–∞ - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        if (this.chartType === 'line') {
            const lineData = {
                time: candle.time,
                value: candle.close
            };
            
            try {
                this.lineSeries.update(lineData);
                this.updatePriceDisplay(candle.close);
            } catch (error) {
                window.errorLogger?.error('chart', 'Error updating line chart', {
                    error: error.message,
                    lineData: lineData
                });
                console.error('Error updating line chart:', error);
            }
            return;
        }
        
        // –î–ª—è Candles –∏ Bars - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        if (this.chartType === 'candles' || this.chartType === 'bars') {
            if (!window.chartTimeframeManager) {
                window.errorLogger?.error('chart', 'chartTimeframeManager not available');
                return;
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            const tick = {
                time: candle.time,
                price: candle.close,
                volume: candle.volume || 0
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–≤–µ—á—É —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            const result = window.chartTimeframeManager.updateCandleWithTick(
                this.currentCandleByTimeframe, 
                tick, 
                this.timeframe
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
            this.currentCandleByTimeframe = result.candle;
            isNewCandle = result.isNewCandle;
            candle = result.candle;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if (!candle || typeof candle.time === 'undefined') {
            window.errorLogger?.error('chart', 'Invalid candle data received', { candle });
            console.warn('Invalid candle data received:', candle);
            return;
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç–æ–º
        if (typeof candle.time !== 'number' || isNaN(candle.time)) {
            window.errorLogger?.error('chart', 'Invalid candle time format', { 
                type: typeof candle.time, 
                value: candle.time,
                candle: candle
            });
            console.error('Invalid candle time format - expected number, got:', typeof candle.time, candle.time);
            return;
        }
        
        // –†–ï–®–ï–ù–ò–ï #3: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º timestamp –ü–ï–†–ï–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const beforeUpdateTime = this.lastCandle?.time || 0;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
        if (this.lastCandle && this.lastCandle.time) {
            if (!isNewCandle) {
                // –î–ª—è —Ç–∏–∫–æ–≤: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É, –∞ –Ω–µ —Å—Ç–∞—Ä—É—é
                if (candle.time < this.lastCandle.time) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–∏–∫–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏)
                    window.errorLogger?.debug('chart', 'Ignoring outdated tick', {
                        tickTime: candle.time,
                        lastCandleTime: this.lastCandle.time,
                        timeDiff: this.lastCandle.time - candle.time
                    });
                    return;
                }
                // –£–õ–£–ß–®–ï–ù–ò–ï: –ï—Å–ª–∏ —Ç–∏–∫ –ø—Ä–∏—à–µ–ª —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤—É—é —Å–≤–µ—á—É
                if (candle.time > this.lastCandle.time) {
                    window.errorLogger?.info('chart', 'Tick with new time - treating as new candle', {
                        tickTime: candle.time,
                        lastCandleTime: this.lastCandle.time,
                        timeDiff: candle.time - this.lastCandle.time
                    });
                    console.log('Tick with new time - treating as new candle:', candle.time, 'last:', this.lastCandle.time);
                    isNewCandle = true; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –Ω–æ–≤–æ–π —Å–≤–µ—á–∏
                }
                // –ï—Å–ª–∏ candle.time === this.lastCandle.time - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
            } else {
                // –î–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π: –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                if (candle.time <= this.lastCandle.time) {
                    window.errorLogger?.warn('chart', 'REJECTED: New candle has older or equal timestamp', {
                        candleTime: candle.time,
                        lastTime: this.lastCandle.time,
                        candleCount: this.candleCount,
                        timeDiff: candle.time - this.lastCandle.time
                    });
                    console.warn('New candle has older or equal timestamp - candle:', candle.time, 'last:', this.lastCandle.time);
                    return;
                }
            }
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è OHLC - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!
        if (candle.high < candle.low || 
            candle.high < candle.open || 
            candle.high < candle.close ||
            candle.low > candle.open ||
            candle.low > candle.close) {
            window.errorLogger?.error('chart', 'Invalid OHLC data detected', { candle });
            console.error('Invalid OHLC data:', candle);
            return;
        }
        
        // –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π - –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 16ms (60fps)
        const now = Date.now();
        
        // –†–ï–®–ï–ù–ò–ï #3: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–∏
        let actuallyAddedNewCandle = false;
        
        // üéØ –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ü–ï–†–í–û–ì–û –¢–ò–ö–ê: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ race condition
        if (!isNewCandle && this.isFirstTickAfterChange) {
            // –≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–∏–∫ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–∫—Ç–∏–≤–∞ - –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –ë–ï–ó –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
            window.errorLogger?.info('chart', 'üéØ First tick after symbol change - applying directly', {
                candle,
                lastCandle: this.lastCandle,
                symbol: this.symbol
            });
            
            this.applyTickDirectly(candle, false);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–∫–æ–≤
            this.lastCandle = candle;
            this.currentInterpolatedCandle = { ...candle };
            this.targetCandle = null;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            this.isFirstTickAfterChange = false;
            
            return;
        }
        
        // üöÄ PAGE VISIBILITY: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–∏–∫–æ–≤
        if (!isNewCandle && this.interpolationEnabled && this.lastCandle && this.chartType !== 'line') {
            // –≠—Ç–æ —Ç–∏–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏)
            
            if (!this.isPageVisible) {
                // ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –ë–ï–ó RAF
                this.tickQueue.push({ candle, isNewCandle });
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏)
                const latestCandle = this.tickQueue[this.tickQueue.length - 1].candle;
                this.applyTickDirectly(latestCandle, false);
                
                this.lastCandle = candle;
                return;
            }
            
            // ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
            const timeSinceLastVisible = now - this.lastVisibleTime;
            
            if (timeSinceLastVisible > this.IDLE_THRESHOLD) {
                // –ü—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
                window.errorLogger?.debug('interpolation', 'Skipping interpolation due to idle time', {
                    idleTime: timeSinceLastVisible,
                    threshold: this.IDLE_THRESHOLD
                });
                
                this.applyTickDirectly(candle, false);
                this.lastCandle = candle;
                this.lastVisibleTime = now;
                return;
            }
            
            // ‚úÖ –í—Å–µ –û–ö - –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é —Å RAF
            const fromCandle = this.currentInterpolatedCandle || this.lastCandle;
            this.startInterpolation(fromCandle, candle);
            this.lastCandle = candle;
            this.lastTickTime = now;
            this.lastVisibleTime = now;
            return; // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Å–∞–º–∞ –æ–±–Ω–æ–≤–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ requestAnimationFrame
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—á—É –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (–¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –∏–ª–∏ –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞)
        try {
            activeSeries.update(candle);
            
            // –†–ï–®–ï–ù–ò–ï #2 –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —á–µ—Ä–µ–∑ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
            // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º candleSeries.data().length —Ç.–∫. –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±—É—Ñ–µ—Ä!
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤–µ—á–∞ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª–µ–Ω–∞
            if (isNewCandle && candle.time > beforeUpdateTime) {
                actuallyAddedNewCandle = true;
                
                // –í–ê–ñ–ù–û: –ü—Ä–æ—Å—Ç–æ–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
                this.candleCount++;
                
                window.errorLogger?.debug('chart', 'New candle added - count incremented', {
                    newCandleCount: this.candleCount,
                    candleTime: candle.time
                });
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –ø–∞–º—è—Ç–∏
                if (this.candleCount > this.MAX_CANDLES_IN_MEMORY) {
                    window.errorLogger?.warn('chart', 'Memory limit reached - cleaning old candles', {
                        currentCount: this.candleCount,
                        maxAllowed: this.MAX_CANDLES_IN_MEMORY
                    });
                    
                    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏ –∏–∑ —Å–µ—Ä–∏–∏
                    const allCandles = activeSeries.data();
                    
                    if (allCandles && allCandles.length > 0) {
                        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_CANDLES_IN_MEMORY —Å–≤–µ—á–µ–π
                        const candlesToKeep = Math.floor(this.MAX_CANDLES_IN_MEMORY * 0.75); // 75% –¥–ª—è –∑–∞–ø–∞—Å–∞
                        const trimmedCandles = allCandles.slice(-candlesToKeep);
                        
                        window.errorLogger?.info('chart', 'Trimming candle data', {
                            before: allCandles.length,
                            after: trimmedCandles.length,
                            removed: allCandles.length - trimmedCandles.length
                        });
                        
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        activeSeries.setData(trimmedCandles);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                        this.candleCount = trimmedCandles.length;
                        
                        // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º lastCandle –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        if (trimmedCandles.length > 0) {
                            this.lastCandle = trimmedCandles[trimmedCandles.length - 1];
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
                            window.errorLogger?.info('chart', 'Post-trim continuity check', {
                                lastCandleTime: this.lastCandle.time,
                                lastCandleOpen: this.lastCandle.open,
                                lastCandleClose: this.lastCandle.close,
                                currentInterpolatedClose: this.currentInterpolatedCandle?.close
                            });
                            
                            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            if (this.currentInterpolatedCandle) {
                                this.currentInterpolatedCandle = { ...this.lastCandle };
                            }
                        }
                        
                        // –¢–∞–∫–∂–µ –æ–±—Ä–µ–∑–∞–µ–º –æ–±—ä–µ–º—ã
                        const allVolumes = this.volumeSeries.data();
                        if (allVolumes && allVolumes.length > 0) {
                            const trimmedVolumes = allVolumes.slice(-candlesToKeep);
                            this.volumeSeries.setData(trimmedVolumes);
                        }
                    }
                }
                
                // –î–ª—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (this.animationFrameId) {
                    cancelAnimationFrame(this.animationFrameId);
                    this.animationFrameId = null;
                }
                this.currentInterpolatedCandle = candle;
            }
            
            this.volumeSeries.update({
                time: candle.time,
                value: candle.volume,
                color: candle.close >= candle.open ? '#26d07c80' : '#ff475780'
            });
        } catch (error) {
            window.errorLogger?.error('chart', 'Error updating chart', {
                error: error.message,
                candle: candle,
                lastCandle: this.lastCandle
            });
            console.error('Error updating chart:', error, 'Candle:', candle, 'Last candle:', this.lastCandle);
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ UI (–¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π, —Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏)
        if (isNewCandle) {
            this.updatePriceDisplay(candle.close);
        }
        
        // –†–ï–®–ï–ù–ò–ï #3: –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–≤–µ—á–∞ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        if (actuallyAddedNewCandle) {
            window.errorLogger?.info('chart', 'New candle successfully added', { 
                time: candle.time, 
                timeISO: new Date(candle.time * 1000).toISOString(),
                open: candle.open, 
                close: candle.close,
                candleCount: this.candleCount,
                beforeUpdateTime: beforeUpdateTime
            });
            console.log('New candle created:', candle.time, 'open:', candle.open, 'close:', candle.close);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º lastCandle –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            this.lastCandle = candle;
            
            // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç
            if (!this.isUserInteracting) {
                // –†–ï–®–ï–ù–ò–ï #4 & #6: –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π debounce –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                clearTimeout(this.scrollDebounceTimer);
                
                this.scrollDebounceTimer = setTimeout(() => {
                    try {
                        const timeScale = this.chart.timeScale();
                        const currentRange = timeScale.getVisibleLogicalRange();
                        
                        if (currentRange) {
                            const rightOffsetBars = 50; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                            
                            // –†–ï–®–ï–ù–ò–ï #4: –ò—Å–ø–æ–ª—å–∑—É–µ–º candleCount –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                            // –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–Ω–µ—Å—Ç–∏ –ø—É—Ç–∞–Ω–∏—Ü—É
                            const isNearEnd = currentRange.to >= (this.candleCount - 1 - 5);
                            
                            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î —Ä–∞—Å—á–µ—Ç–∞–º–∏
                            window.errorLogger?.debug('range', 'Before scroll calculation', {
                                candleCount: this.candleCount,
                                currentRange: { from: currentRange.from, to: currentRange.to },
                                isNearEnd: isNearEnd,
                                rightOffsetBars: rightOffsetBars
                            });
                            
                            if (isNearEnd) {
                                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ candleCount < 1000
                                // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–æ–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ —Ä–∞–±–æ—Ç—É
                                // –¢–µ–ø–µ—Ä—å –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å candleCount —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
                                
                                // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û–°–ö–†–û–õ–õ–ê:
                                
                                // 1. –í—ã—á–∏—Å–ª—è–µ–º "—á–∏—Å—Ç—É—é" —à–∏—Ä–∏–Ω—É –≤–∏–¥–∏–º—ã—Ö —Å–≤–µ—á–µ–π –ë–ï–ó rightOffset
                                const totalWidth = currentRange.to - currentRange.from;
                                const pureVisibleBars = Math.max(this.MIN_VISIBLE_BARS, Math.floor(totalWidth - rightOffsetBars));
                                
                                // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º candleCount –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                                const safeLastCandleIndex = this.candleCount - 1;
                                
                                // 3. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–¥–∏–º—Å—è —á—Ç–æ candleCount –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π
                                if (safeLastCandleIndex < pureVisibleBars) {
                                    window.errorLogger?.warn('range', 'Not enough candles for scroll calculation', {
                                        candleCount: this.candleCount,
                                        pureVisibleBars: pureVisibleBars,
                                        lastCandleIndex: safeLastCandleIndex
                                    });
                                    console.warn('Not enough candles for scroll:', this.candleCount, 'needed:', pureVisibleBars);
                                    return;
                                }
                                
                                // 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                                const newFrom = Math.max(0, safeLastCandleIndex - pureVisibleBars);
                                const newTo = safeLastCandleIndex + rightOffsetBars;
                                
                                // 3. –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
                                const calculatedPureWidth = newTo - newFrom - rightOffsetBars;
                                
                                if (calculatedPureWidth < this.MIN_VISIBLE_BARS) {
                                    window.errorLogger?.error('range', 'Preventing chart collapse - range too narrow!', {
                                        calculatedPureWidth: calculatedPureWidth,
                                        minRequired: this.MIN_VISIBLE_BARS,
                                        newFrom: newFrom,
                                        newTo: newTo
                                    });
                                    console.error('Preventing chart collapse - calculated range too narrow!');
                                    return;
                                }
                                
                                const newRange = {
                                    from: newFrom,
                                    to: newTo
                                };
                                
                                // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç—ã
                                window.errorLogger?.debug('range', 'Scroll calculation result', {
                                    totalWidth: totalWidth,
                                    pureVisibleBars: pureVisibleBars,
                                    calculatedPureWidth: calculatedPureWidth,
                                    newFrom: newFrom,
                                    newTo: newTo,
                                    newRange: newRange
                                });
                                
                                // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
                                if (newFrom < 0 || newTo < 0 || newFrom >= newTo) {
                                    window.errorLogger?.error('range', 'Invalid range calculated!', {
                                        newRange: newRange,
                                        candleCount: this.candleCount,
                                        currentRange: currentRange
                                    });
                                    console.error('Invalid range calculated:', newRange);
                                    return;
                                }
                                
                                // –†–ï–®–ï–ù–ò–ï #1: –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º autoScale –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                                this.isAdjustingScale = true;
                                
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                const currentAutoScale = true; // –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                
                                // –û—Ç–∫–ª—é—á–∞–µ–º autoScale
                                this.chart.applyOptions({
                                    rightPriceScale: {
                                        autoScale: false
                                    }
                                });
                                
                                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                                timeScale.setVisibleLogicalRange(newRange);
                                
                                window.errorLogger?.debug('range', 'Range applied successfully', { newRange });
                                
                                // –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º autoScale
                                setTimeout(() => {
                                    this.chart.applyOptions({
                                        rightPriceScale: {
                                            autoScale: currentAutoScale
                                        }
                                    });
                                    this.isAdjustingScale = false;
                                }, 150);
                            }
                        } else {
                            window.errorLogger?.warn('range', 'No current range available');
                        }
                    } catch (error) {
                        window.errorLogger?.error('range', 'Error scrolling chart', { 
                            error: error.message, 
                            stack: error.stack 
                        });
                        console.error('Error scrolling chart:', error);
                        this.isAdjustingScale = false;
                    }
                }, 300); // –†–ï–®–ï–ù–ò–ï #4: –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 50ms –¥–æ 300ms –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            } else {
                window.errorLogger?.debug('range', 'Skipping scroll - user is interacting');
            }
        } else {
            // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ (—Ç–∏–∫) –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º lastCandle
            this.lastCandle = candle;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
    updatePriceDisplay(price) {
        const priceEl = document.getElementById('current-price');
        if (priceEl) {
            priceEl.textContent = price.toFixed(4);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            priceEl.classList.remove('price-up', 'price-down');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            const prevPrice = parseFloat(priceEl.dataset.prevPrice || price);
            if (price > prevPrice) {
                priceEl.classList.add('price-up');
            } else if (price < prevPrice) {
                priceEl.classList.add('price-down');
            }
            
            priceEl.dataset.prevPrice = price;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ª–∏–Ω–∏–∏ —Ü–µ–Ω—ã
        this.currentPrice = price;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º PriceLine —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π (–≥–æ–ª—É–±–∞—è –ª–∏–Ω–∏—è)
        if (this.expirationPriceLine && this.chartType !== 'line') {
            this.updateExpirationPriceLine();
        }
    }
    
    // –°–æ–∑–¥–∞—Ç—å –ª–∏–Ω–∏—é —Ü–µ–Ω—ã (–±–µ–∑ –æ–≤–µ—Ä–ª–µ—è —Å –≤—Ä–µ–º–µ–Ω–µ–º)
    createExpirationOverlay() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–≤–µ—Ä–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        this.removeExpirationOverlay();
        
        if (!this.currentPrice) return;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ PriceLine –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã —Å–ø—Ä–∞–≤–∞ (–±–µ–∑ HTML –æ–≤–µ—Ä–ª–µ—è)
        const activeSeries = this.getActiveSeries();
        if (activeSeries) {
            this.expirationPriceLine = activeSeries.createPriceLine({
                price: this.currentPrice,
                color: '#4f9fff',
                lineWidth: 2,
                lineStyle: LightweightCharts.LineStyle.Solid,
                axisLabelVisible: true,
                title: '', // –ø—É—Å—Ç–æ–π title - —Ç–æ–ª—å–∫–æ —Ü–µ–Ω–∞ —Å–ø—Ä–∞–≤–∞
                axisLabelColor: '#4f9fff',
                axisLabelTextColor: '#ffffff'
            });
        }
        
        window.errorLogger?.info('chart', 'Price line created');
    }
    
    // –£–¥–∞–ª–∏—Ç—å –ª–∏–Ω–∏—é —Ü–µ–Ω—ã
    removeExpirationOverlay() {
        // –£–¥–∞–ª—è–µ–º PriceLine (–ª–∏–Ω–∏—è –∏ —Ü–µ–Ω–∞ —Å–ø—Ä–∞–≤–∞)
        if (this.expirationPriceLine) {
            const activeSeries = this.getActiveSeries();
            if (activeSeries) {
                try {
                    activeSeries.removePriceLine(this.expirationPriceLine);
                } catch (error) {
                    window.errorLogger?.warn('chart', 'Error removing price line', { error: error.message });
                }
            }
            this.expirationPriceLine = null;
        }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ–≤–µ—Ä–ª–µ—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    updateExpirationOverlayPosition() {
        // Removed - no longer displaying time overlay
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å PriceLine —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π (–≥–æ–ª—É–±–∞—è –ª–∏–Ω–∏—è)
    updateExpirationPriceLine() {
        if (!this.expirationPriceLine || !this.currentPrice) return;
        
        const activeSeries = this.getActiveSeries();
        if (!activeSeries) return;
        
        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–∏–Ω–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
            activeSeries.removePriceLine(this.expirationPriceLine);
            this.expirationPriceLine = activeSeries.createPriceLine({
                price: this.currentPrice,
                color: '#4f9fff',
                lineWidth: 2,
                lineStyle: LightweightCharts.LineStyle.Solid,
                axisLabelVisible: true,
                title: '',
                axisLabelColor: '#4f9fff',
                axisLabelTextColor: '#ffffff'
            });
            window.errorLogger?.info('chart', 'Price line updated', { price: this.currentPrice });
        } catch (error) {
            window.errorLogger?.error('chart', 'Error updating price line', { error: error.message });
        }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –æ–≤–µ—Ä–ª–µ–π —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º
    updateExpirationOverlay(timeframe, formattedTime, timeLeft) {
        // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–∏–Ω–∏—é —Ü–µ–Ω—ã
        if (this.chartType !== 'line' && this.currentPrice) {
            if (!this.expirationPriceLine) {
                this.createExpirationOverlay();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º HTML —ç–ª–µ–º–µ–Ω—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            this.updateChartTimer(timeframe, formattedTime);
        }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    updateChartTimer(timeframe, formattedTime) {
        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        let timerElement = document.getElementById('chart-expiration-timer');
        
        if (!timerElement) {
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            timerElement = document.createElement('div');
            timerElement.id = 'chart-expiration-timer';
            timerElement.className = 'chart-expiration-timer';
            
            const chartContainer = document.getElementById('chart');
            if (chartContainer) {
                chartContainer.appendChild(timerElement);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        const timeframeLabel = window.chartTimeframeManager?.getTimeframeLabel(timeframe) || timeframe;
        timerElement.innerHTML = `<span class="timeframe-label">${timeframeLabel}</span> <span class="timer-value">${formattedTime}</span>`;
    }

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    calculateInterpolationDuration() {
        if (!window.chartTimeframeManager) {
            return this.baseInterpolationDuration;
        }
        
        const timeframeDuration = window.chartTimeframeManager.getTimeframeDuration(this.timeframe);
        
        // –î–ª—è S5 (5 —Å–µ–∫) –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å 300ms
        // –î–ª—è –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        // –ù–æ –Ω–µ –ª–∏–Ω–µ–π–Ω–æ, –∞ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
        // M2 (120 —Å–µ–∫) = 300ms * (120/5)^0.7 ‚âà 2000ms
        const ratio = timeframeDuration / 5; // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ S5
        const scaledDuration = this.baseInterpolationDuration * Math.pow(ratio, 0.7);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–æ 3000ms –¥–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        return Math.min(scaledDuration, 3000);
    }
    
    // üé® –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø - –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –º–µ–∂–¥—É —Ç–∏–∫–∞–º–∏ (60fps –≤–∏–∑—É–∞–ª—å–Ω–æ)
    // –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç "Binance-level" –ø–ª–∞–≤–Ω–æ—Å—Ç—å –¥–∞–∂–µ –ø—Ä–∏ 20 —Ç–∏–∫–∞—Ö/—Å–µ–∫
    startInterpolation(fromCandle, toCandle) {
        if (!this.interpolationEnabled || !fromCandle || !toCandle) {
            return;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        this.interpolationDuration = this.calculateInterpolationDuration();
        
        window.errorLogger?.debug('interpolation', 'Starting interpolation', {
            timeframe: this.timeframe,
            duration: this.interpolationDuration,
            fromClose: fromCandle.close,
            toClose: toCandle.close
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentInterpolatedCandle = { ...fromCandle };
        this.targetCandle = { ...toCandle };
        this.interpolationStartTime = performance.now();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        this.animate();
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª (60fps —á–µ—Ä–µ–∑ requestAnimationFrame)
    animate() {
        if (!this.interpolationEnabled || !this.targetCandle || !this.currentInterpolatedCandle) {
            return;
        }
        
        const now = performance.now();
        const elapsed = now - this.interpolationStartTime;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (0.0 - 1.0)
        const progress = Math.min(elapsed / this.interpolationDuration, 1.0);
        
        // Easing function –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (easeOutQuad - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç, –ø–ª–∞–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
        const eased = 1 - Math.pow(1 - progress, 2);
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º OHLC –∑–Ω–∞—á–µ–Ω–∏—è
        const interpolated = {
            time: this.targetCandle.time,
            open: this.currentInterpolatedCandle.open, // open –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            high: this.lerp(this.currentInterpolatedCandle.high, this.targetCandle.high, eased),
            low: this.lerp(this.currentInterpolatedCandle.low, this.targetCandle.low, eased),
            close: this.lerp(this.currentInterpolatedCandle.close, this.targetCandle.close, eased),
            volume: this.targetCandle.volume // volume –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        try {
            const activeSeries = this.getActiveSeries();
            if (activeSeries && this.chartType !== 'line') {
                activeSeries.update(interpolated);
            }
            
            this.volumeSeries.update({
                time: interpolated.time,
                value: interpolated.volume,
                color: interpolated.close >= interpolated.open ? '#26d07c80' : '#ff475780'
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –ò –ª–∏–Ω–∏—é —Ü–µ–Ω—ã
            this.updatePriceDisplay(interpolated.close);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
            if (this.expirationPriceLine && this.chartType !== 'line') {
                this.updateExpirationPriceLine();
            }
        } catch (error) {
            window.errorLogger?.error('interpolation', 'Error during animation', {
                error: error.message,
                interpolated: interpolated
            });
            console.error('Animation error:', error);
            return;
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (progress < 1.0) {
            this.currentInterpolatedCandle = interpolated;
            this.animationFrameId = requestAnimationFrame(() => this.animate());
        } else {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.currentInterpolatedCandle = this.targetCandle;
            this.animationFrameId = null;
        }
    }
    
    // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    lerp(start, end, t) {
        return start + (end - start) * t;
    }
    
    // üöÄ –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–∏ –ë–ï–ó –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (–¥–ª—è —Å–∫—Ä—ã—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏)
    applyTickDirectly(candle, isNewCandle) {
        const activeSeries = this.getActiveSeries();
        if (!activeSeries || !this.volumeSeries) {
            return;
        }
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
            activeSeries.update(candle);
            
            this.volumeSeries.update({
                time: candle.time,
                value: candle.volume,
                color: candle.close >= candle.open ? '#26d07c80' : '#ff475780'
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
            this.updatePriceDisplay(candle.close);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
            this.currentInterpolatedCandle = { ...candle };
            
            window.errorLogger?.debug('chart', 'Tick applied directly (no interpolation)', {
                time: candle.time,
                close: candle.close,
                isNewCandle: isNewCandle
            });
        } catch (error) {
            window.errorLogger?.error('chart', 'Error applying tick directly', {
                error: error.message,
                candle: candle
            });
        }
    }
    
    // –ù–û–í–û–ï: –ú–∏–∫—Ä–æ-—Å–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∫–∞
    // –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "–∑–∞–º–µ—Ä–∑—à–µ–π" —Å–∏–Ω–µ–π –ª–∏–Ω–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–∞
    startInitialPriceAnimation() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.initialAnimationTimer) {
            clearInterval(this.initialAnimationTimer);
            this.initialAnimationTimer = null;
        }
        
        let tickCount = 0;
        const MAX_TICKS = 20; // –ú–∞–∫—Å–∏–º—É–º 20 —Ç–∏–∫–æ–≤ (5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 250ms)
        
        this.initialAnimationTimer = setInterval(() => {
            tickCount++;
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–∫ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
            if (this.lastTickTime > 0 || tickCount >= MAX_TICKS) {
                clearInterval(this.initialAnimationTimer);
                this.initialAnimationTimer = null;
                window.errorLogger?.debug('animation', 'Initial price animation stopped', {
                    reason: this.lastTickTime > 0 ? 'real tick received' : 'max ticks reached',
                    tickCount: tickCount
                });
                return;
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (¬±0.02%)
            const microChange = (Math.random() - 0.5) * 0.0004; // ¬±0.02%
            const newPrice = this.currentPrice * (1 + microChange);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –ª–∏–Ω–∏—é, –ù–ï —Ç—Ä–æ–≥–∞–µ–º —Å–≤–µ—á–∏
            this.updatePriceDisplay(newPrice);
            this.currentPrice = newPrice;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã
            if (this.expirationPriceLine && this.chartType !== 'line') {
                this.updateExpirationPriceLine();
            }
        }, 250); // –∫–∞–∂–¥—ã–µ 250ms
        
        window.errorLogger?.debug('animation', 'Initial price animation started', {
            initialPrice: this.currentPrice
        });
    }

    // –°–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
    async changeSymbol(newSymbol) {
        const oldSymbol = this.symbol;
        
        // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û —Å–º–µ–Ω—ã
        window.errorLogger?.info('chart', 'üîÑ SYMBOL CHANGE STARTED', { 
            from: oldSymbol, 
            to: newSymbol,
            oldState: {
                candleCount: this.candleCount,
                lastCandle: this.lastCandle,
                currentInterpolatedCandle: this.currentInterpolatedCandle,
                basePrice: this.basePrice
            }
        });
        
        // üõ°Ô∏è –ë–õ–û–ö–ò–†–û–í–ö–ê –¢–ò–ö–û–í: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.isInitializingSymbol = true;
        this.pendingTicks = []; // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ç–∏–∫–æ–≤
        
        window.errorLogger?.info('chart', 'üîí Ticks blocked during initialization', {
            symbol: newSymbol
        });
        
        // üêõ DEBUG MODE: –í–∫–ª—é—á–∞–µ–º –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.changeSymbolDebugMode = true;
        if (this.changeSymbolDebugTimer) {
            clearTimeout(this.changeSymbolDebugTimer);
        }
        this.changeSymbolDebugTimer = setTimeout(() => {
            this.changeSymbolDebugMode = false;
            window.errorLogger?.info('chart', 'Debug mode disabled after 30 seconds');
        }, 30000);

        // üéØ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∏–º–≤–æ–ª–∞ –°–ò–ù–•–†–û–ù–ù–û
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
        }
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        this.currentInterpolatedCandle = null;
        this.targetCandle = null;
        this.interpolationStartTime = null;
        this.lastTickTime = 0;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
        if (this.initialAnimationTimer) {
            clearInterval(this.initialAnimationTimer);
            this.initialAnimationTimer = null;
        }
        
        // –£–¥–∞–ª—è–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã –∏ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∏–º–≤–æ–ª–∞
        this.removeExpirationOverlay();
        
        // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
        const timerElement = document.getElementById('chart-expiration-timer');
        if (timerElement) {
            timerElement.remove();
        }

        // –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        if (this.candleSeries) {
            this.candleSeries.setData([]);
        }
        if (this.lineSeries) {
            this.lineSeries.setData([]);
        }
        if (this.barSeries) {
            this.barSeries.setData([]);
        }
        if (this.volumeSeries) {
            this.volumeSeries.setData([]);
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
        this.candleCount = 0;
        this.lastCandle = null;
        this.currentCandleByTimeframe = null;
        this.basePrice = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º basePrice
        this.lastHistoricalCandle = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastHistoricalCandle
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        this.processedCandles.clear();

        window.errorLogger?.info('chart', 'Loading historical data...', { symbol: newSymbol });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await this.loadHistoricalData(newSymbol);
        
        // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: basePrice –∏ lastHistoricalCandle —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        window.errorLogger?.info('chart', '‚úÖ Historical data loaded, validation ready', {
            symbol: newSymbol,
            basePrice: this.basePrice,
            lastHistoricalCandle: this.lastHistoricalCandle
        });
        
        window.errorLogger?.info('chart', 'Historical data loaded', { 
            symbol: newSymbol,
            candleCount: this.candleCount,
            lastCandle: this.lastCandle
        });
        
        // üéØ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –°–ï–†–í–ï–†–û–ú: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—á–∏
        try {
            const API_URL = window.location.origin.includes('localhost')
                ? 'http://localhost:3001'
                : window.location.origin;
            
            window.errorLogger?.info('chart', 'Requesting current state from server...', { symbol: newSymbol });
            
            const response = await fetch(`${API_URL}/api/chart/current-state/${newSymbol}`);
            
            if (response.ok) {
                const stateData = await response.json();
                
                window.errorLogger?.info('chart', '‚úÖ Server state received', {
                    symbol: newSymbol,
                    serverLastCandle: stateData.lastCandle,
                    serverCurrentState: stateData.currentState,
                    serverPrice: stateData.currentPrice,
                    clientLastCandle: this.lastCandle
                });
                
                // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º lastCandle —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                if (stateData.currentState && stateData.currentState.time >= this.lastCandle?.time) {
                    window.errorLogger?.info('chart', 'Syncing lastCandle with server state', {
                        oldLastCandle: this.lastCandle,
                        newLastCandle: stateData.currentState
                    });
                    
                    this.lastCandle = stateData.currentState;
                    this.currentInterpolatedCandle = { ...stateData.currentState };
                    this.currentPrice = stateData.currentPrice;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    this.updatePriceDisplay(this.currentPrice);
                }
                
                // üéØ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì: –ü–µ—Ä–≤—ã–π —Ç–∏–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Å–æ–±—ã–º –æ–±—Ä–∞–∑–æ–º
                this.isFirstTickAfterChange = true;
                
                window.errorLogger?.info('chart', 'üéØ First tick flag set - next tick will be applied directly');
            } else {
                window.errorLogger?.warn('chart', 'Failed to get server state, continuing without sync', {
                    status: response.status
                });
                
                // –í—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                this.isFirstTickAfterChange = true;
            }
        } catch (error) {
            window.errorLogger?.error('chart', 'Error fetching server state', {
                error: error.message,
                stack: error.stack
            });
            console.error('Failed to sync with server:', error);
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –Ω–æ —Å —Ñ–ª–∞–≥–æ–º
            this.isFirstTickAfterChange = true;
        }

        // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        this.connectWebSocket(newSymbol);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–∏–Ω–∏—è —Ü–µ–Ω—ã —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ loadHistoricalData
        // –ù–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –≤—ã—à–µ
        
        // üõ°Ô∏è –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –¢–ò–ö–û–í: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        this.isInitializingSymbol = false;
        
        window.errorLogger?.info('chart', 'üîì Ticks unblocked - initialization complete', {
            symbol: newSymbol,
            pendingTicksCount: this.pendingTicks.length
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
        if (this.pendingTicks.length > 0) {
            const latestTick = this.pendingTicks[this.pendingTicks.length - 1];
            
            window.errorLogger?.info('chart', 'Applying latest pending tick', {
                symbol: newSymbol,
                tickTime: latestTick.candle.time,
                totalPending: this.pendingTicks.length
            });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
            this.applyTickDirectly(latestTick.candle, latestTick.isNewCandle);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º lastCandle
            this.lastCandle = latestTick.candle;
            this.currentInterpolatedCandle = { ...latestTick.candle };
        }
        
        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        this.pendingTicks = [];
        
        window.errorLogger?.info('chart', '‚úÖ SYMBOL CHANGE COMPLETED', { 
            symbol: newSymbol,
            candleCount: this.candleCount,
            lastCandle: this.lastCandle,
            isFirstTickAfterChange: this.isFirstTickAfterChange,
            debugMode: this.changeSymbolDebugMode,
            isInitializingSymbol: this.isInitializingSymbol
        });
        console.log(`Chart switched to ${newSymbol} with ${this.candleCount} candles`);
    }

    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    closeWebSocket() {
        if (this.ws) {
            const currentState = this.ws.readyState;
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —É—Ç–µ—á–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.ws.onopen = null;
            this.ws.onmessage = null;
            this.ws.onerror = null;
            this.ws.onclose = null;
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ
            if (currentState === WebSocket.OPEN || currentState === WebSocket.CONNECTING) {
                this.ws.close(1000, 'Intentional close'); // 1000 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            }
            
            window.errorLogger?.info('websocket', 'WebSocket cleaned up', { 
                previousState: currentState
            });
            
            this.ws = null;
        }
    }

    // –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
    setChartType(type) {
        if (!this.chart) return;
        
        this.chartType = type;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–∏–∏
        if (this.candleSeries) {
            this.candleSeries.applyOptions({ visible: type === 'candles' });
        }
        if (this.lineSeries) {
            this.lineSeries.applyOptions({ visible: type === 'line' });
        }
        if (this.barSeries) {
            this.barSeries.applyOptions({ visible: type === 'bars' });
        }
        
        // –°–æ–∑–¥–∞–µ–º/—É–¥–∞–ª—è–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        if (type === 'candles' || type === 'bars') {
            // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã –¥–ª—è candles/bars
            if (this.currentPrice) {
                this.createExpirationOverlay();
            }
        } else {
            // –£–¥–∞–ª—è–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã –¥–ª—è line –≥—Ä–∞—Ñ–∏–∫–∞
            this.removeExpirationOverlay();
        }
        
        // –î–ª—è line –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
        if (type === 'line') {
            if (window.chartTimeframeManager) {
                window.chartTimeframeManager.stopExpirationTimer();
            }
        } else {
            // –î–ª—è candles/bars –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            if (window.chartTimeframeManager) {
                window.chartTimeframeManager.setTimeframe(this.timeframe, (formatted, timeLeft, tf) => {
                    this.updateExpirationOverlay(tf, formatted, timeLeft);
                });
            }
        }
        
        window.errorLogger?.info('chart', 'Chart type changed', { type });
        console.log(`Chart type changed to: ${type}`);
    }
    
    // –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º
    setTimeframe(timeframe) {
        this.timeframe = timeframe;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è candles/bars
        if (this.chartType !== 'line' && window.chartTimeframeManager) {
            window.chartTimeframeManager.setTimeframe(timeframe, (formatted, timeLeft, tf) => {
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
                this.updateExpirationOverlay(tf, formatted, timeLeft);
            });
        } else if (this.chartType === 'line') {
            // –î–ª—è line –≥—Ä–∞—Ñ–∏–∫–∞ —É–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä
            const timerElement = document.getElementById('chart-expiration-timer');
            if (timerElement) {
                timerElement.remove();
            }
        }
        
        window.errorLogger?.info('chart', 'Timeframe changed', { timeframe });
        console.log(`Timeframe changed to: ${timeframe}`);
    }
    
    // –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Ä–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    getActiveSeries() {
        switch (this.chartType) {
            case 'line':
                return this.lineSeries;
            case 'bars':
                return this.barSeries;
            case 'candles':
            default:
                return this.candleSeries;
        }
    }

    // üõ°Ô∏è FALLBACK: –û—á–∏—Å—Ç–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
    cleanAnomalousCandles() {
        const activeSeries = this.getActiveSeries();
        if (!activeSeries) {
            window.errorLogger?.warn('cleanup', 'No active series for cleanup');
            return;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏ –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            const allCandles = activeSeries.data();
            
            if (!allCandles || allCandles.length === 0) {
                window.errorLogger?.debug('cleanup', 'No candles to clean');
                return;
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏
            const cleanedCandles = [];
            let removedCount = 0;
            
            for (const candle of allCandles) {
                const validation = this.validateCandle(candle, 'cleanup');
                
                if (validation.valid) {
                    cleanedCandles.push(candle);
                } else {
                    removedCount++;
                    window.errorLogger?.warn('cleanup', 'Removing anomalous candle', {
                        symbol: this.symbol,
                        candle,
                        reason: validation.reason
                    });
                    console.warn(`üßπ Removing anomalous candle: time=${candle.time}, reason=${validation.reason}`);
                }
            }
            
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞–Ω–æ–º–∞–ª–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            if (removedCount > 0) {
                window.errorLogger?.info('cleanup', 'üßπ Cleaning anomalous candles from chart', {
                    symbol: this.symbol,
                    totalCandles: allCandles.length,
                    removedCount,
                    cleanedCount: cleanedCandles.length
                });
                
                console.log(`üßπ Cleaned ${removedCount} anomalous candles from ${this.symbol}`);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                activeSeries.setData(cleanedCandles);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º candleCount –∏ lastCandle
                this.candleCount = cleanedCandles.length;
                if (cleanedCandles.length > 0) {
                    this.lastCandle = cleanedCandles[cleanedCandles.length - 1];
                    this.currentInterpolatedCandle = { ...this.lastCandle };
                }
                
                // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –æ–±—ä–µ–º—ã
                const allVolumes = this.volumeSeries.data();
                if (allVolumes && allVolumes.length > 0) {
                    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–º—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
                    const cleanedTimes = new Set(cleanedCandles.map(c => c.time));
                    const cleanedVolumes = allVolumes.filter(v => cleanedTimes.has(v.time));
                    this.volumeSeries.setData(cleanedVolumes);
                }
                
                window.errorLogger?.info('cleanup', '‚úÖ Chart cleanup completed', {
                    symbol: this.symbol,
                    newCandleCount: this.candleCount,
                    lastCandle: this.lastCandle
                });
            } else {
                window.errorLogger?.debug('cleanup', 'No anomalous candles found');
            }
        } catch (error) {
            window.errorLogger?.error('cleanup', 'Error during cleanup', {
                symbol: this.symbol,
                error: error.message,
                stack: error.stack
            });
            console.error('Error cleaning anomalous candles:', error);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    destroy() {
        window.errorLogger?.info('chart', 'Destroying chart manager');
        
        this.isDestroyed = true;
        this.isInitialized = false;
        
        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
            this.reconnectTimer = null;
        }
        
        if (this.scrollDebounceTimer) {
            clearTimeout(this.scrollDebounceTimer);
            this.scrollDebounceTimer = null;
        }
        
        // üéØ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        if (this.initialAnimationTimer) {
            clearInterval(this.initialAnimationTimer);
            this.initialAnimationTimer = null;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
        if (window.chartTimeframeManager) {
            window.chartTimeframeManager.destroy();
        }
        
        // –£–¥–∞–ª—è–µ–º –ª–∏–Ω–∏—é —Ü–µ–Ω—ã
        this.removeExpirationOverlay();
        
        // üöÄ –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ visibility
        if (this.visibilityHandlers) {
            document.removeEventListener('visibilitychange', this.visibilityHandlers.visibilitychange);
            window.removeEventListener('blur', this.visibilityHandlers.blur);
            window.removeEventListener('focus', this.visibilityHandlers.focus);
            this.visibilityHandlers = null;
            window.errorLogger?.info('visibility', 'Page visibility handlers removed');
        }
        
        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ç–∏–∫–æ–≤
        this.tickQueue = [];
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º WebSocket
        this.closeWebSocket();

        if (this.chart) {
            this.chart.remove();
            this.chart = null;
        }

        this.candleSeries = null;
        this.lineSeries = null;
        this.barSeries = null;
        this.volumeSeries = null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞
window.chartManager = new ChartManager();

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.chartDiagnostics = {
    getStatus: function() {
        const cm = window.chartManager;
        const status = {
            isInitialized: cm.isInitialized,
            isDestroyed: cm.isDestroyed,
            symbol: cm.symbol,
            candleCount: cm.candleCount,
            connectionId: cm.connectionId,
            websocket: {
                exists: !!cm.ws,
                readyState: cm.ws ? cm.ws.readyState : null,
                readyStateText: cm.ws ? ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][cm.ws.readyState] : null,
                url: cm.ws ? cm.ws.url : null
            },
            processedCandlesCount: cm.processedCandles.size,
            lastCandle: cm.lastCandle ? {
                time: cm.lastCandle.time,
                timeISO: new Date(cm.lastCandle.time * 1000).toISOString(),
                close: cm.lastCandle.close
            } : null,
            memory: window.performance && window.performance.memory ? {
                totalJSHeapSize: window.performance.memory.totalJSHeapSize,
                usedJSHeapSize: window.performance.memory.usedJSHeapSize,
                jsHeapSizeLimit: window.performance.memory.jsHeapSizeLimit,
                usedPercentage: ((window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit) * 100).toFixed(2) + '%'
            } : 'Not available'
        };
        console.table([status]);
        return status;
    },
    
    // –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    startMonitoring: function(intervalSeconds = 10) {
        if (this.monitoringInterval) {
            console.log('Monitoring already running. Stop it first with stopMonitoring()');
            return;
        }
        
        console.log(`Starting monitoring every ${intervalSeconds} seconds...`);
        this.monitoringInterval = setInterval(() => {
            const status = this.getStatus();
            console.log(`[${new Date().toISOString()}] Candles: ${status.candleCount}, WS: ${status.websocket.readyStateText}, Memory: ${status.memory?.usedPercentage || 'N/A'}`);
        }, intervalSeconds * 1000);
    },
    
    stopMonitoring: function() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
            console.log('Monitoring stopped');
        }
    }
};

console.log('üìä Chart diagnostics available:');
console.log('  ‚Ä¢ chartDiagnostics.getStatus() - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å');
console.log('  ‚Ä¢ chartDiagnostics.startMonitoring(10) - –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥');
console.log('  ‚Ä¢ chartDiagnostics.stopMonitoring() - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
