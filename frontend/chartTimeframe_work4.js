// Chart Timeframe Manager
// –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö

class ChartTimeframeManager {
    constructor() {
        // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Å –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        this.timeframes = {
            'S5': 5,       // 5 —Å–µ–∫—É–Ω–¥
            'S10': 10,     // 10 —Å–µ–∫—É–Ω–¥
            'S15': 15,     // 15 —Å–µ–∫—É–Ω–¥
            'S30': 30,     // 30 —Å–µ–∫—É–Ω–¥
            'M1': 60,      // 1 –º–∏–Ω—É—Ç–∞
            'M2': 120,     // 2 –º–∏–Ω—É—Ç—ã
            'M3': 180,     // 3 –º–∏–Ω—É—Ç—ã
            'M5': 300,     // 5 –º–∏–Ω—É—Ç
            'M10': 600,    // 10 –º–∏–Ω—É—Ç
            'M15': 900,    // 15 –º–∏–Ω—É—Ç
            'M30': 1800    // 30 –º–∏–Ω—É—Ç
        };
        
        this.currentTimeframe = 'S5'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥
        this.expirationTimer = null;
        this.onExpirationUpdate = null; // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Ç–∞–π–º–µ—Ä–∞
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    getTimeframeDuration(timeframe) {
        return this.timeframes[timeframe] || this.timeframes['S5'];
    }
    
    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
     * –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ —Å–≤–µ—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * 
     * –ù–∞–ø—Ä–∏–º–µ—Ä:
     * - –î–ª—è M30 (30 –º–∏–Ω—É—Ç): —Å–≤–µ—á–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ :00 –∏ :30 –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
     * - –î–ª—è M10 (10 –º–∏–Ω—É—Ç): —Å–≤–µ—á–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ :00, :10, :20, :30, :40, :50 –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
     * - –î–ª—è S5 (5 —Å–µ–∫—É–Ω–¥): —Å–≤–µ—á–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –æ—Ç –Ω–∞—á–∞–ª–∞ –º–∏–Ω—É—Ç—ã
     */
    getCandleStartTime(timestamp, timeframe) {
        const duration = this.getTimeframeDuration(timeframe);
        
        // –û–∫—Ä—É–≥–ª—è–µ–º timestamp –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–∞—á–∞–ª–∞ —Å–≤–µ—á–∏
        return Math.floor(timestamp / duration) * duration;
    }
    
    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
     */
    getCandleEndTime(timestamp, timeframe) {
        const startTime = this.getCandleStartTime(timestamp, timeframe);
        const duration = this.getTimeframeDuration(timeframe);
        return startTime + duration;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    getTimeUntilCandleClose(timeframe = this.currentTimeframe) {
        const now = Math.floor(Date.now() / 1000); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        const endTime = this.getCandleEndTime(now, timeframe);
        return endTime - now;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (MM:SS)
     */
    formatExpirationTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    getTimeframeLabel(timeframe) {
        const labels = {
            'S5': 'S5 (5 sec)',
            'S10': 'S10 (10 sec)',
            'S15': 'S15 (15 sec)',
            'S30': 'S30 (30 sec)',
            'M1': 'M1 (1 min)',
            'M2': 'M2 (2 min)',
            'M3': 'M3 (3 min)',
            'M5': 'M5 (5 min)',
            'M10': 'M10 (10 min)',
            'M15': 'M15 (15 min)',
            'M30': 'M30 (30 min)'
        };
        return labels[timeframe] || timeframe;
    }
    
    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–µ—á–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–∏–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–≤–µ—á–µ–π
     */
    groupDataByTimeframe(ticks, timeframe) {
        if (!ticks || ticks.length === 0) return [];
        
        const duration = this.getTimeframeDuration(timeframe);
        const candles = {};
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∏–∫–∏ –ø–æ —Å–≤–µ—á–∞–º
        ticks.forEach(tick => {
            const candleStart = this.getCandleStartTime(tick.time, timeframe);
            
            if (!candles[candleStart]) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
                candles[candleStart] = {
                    time: candleStart,
                    open: tick.price,
                    high: tick.price,
                    low: tick.price,
                    close: tick.price,
                    volume: tick.volume || 0
                };
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤–µ—á—É
                const candle = candles[candleStart];
                candle.high = Math.max(candle.high, tick.price);
                candle.low = Math.min(candle.low, tick.price);
                candle.close = tick.price;
                candle.volume += tick.volume || 0;
            }
        });
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return Object.values(candles).sort((a, b) => a.time - b.time);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É —Å –Ω–æ–≤—ã–º —Ç–∏–∫–æ–º
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { candle, isNewCandle }
     */
    updateCandleWithTick(currentCandle, tick, timeframe) {
        const tickTime = tick.time;
        const candleStart = this.getCandleStartTime(tickTime, timeframe);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ç–∏–∫ –∫ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–µ –∏–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Å–≤–µ—á–∞
        const isNewCandle = !currentCandle || currentCandle.time !== candleStart;
        
        if (isNewCandle) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
            return {
                candle: {
                    time: candleStart,
                    open: tick.price,
                    high: tick.price,
                    low: tick.price,
                    close: tick.price,
                    volume: tick.volume || 0
                },
                isNewCandle: true
            };
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
            return {
                candle: {
                    time: currentCandle.time,
                    open: currentCandle.open,
                    high: Math.max(currentCandle.high, tick.price),
                    low: Math.min(currentCandle.low, tick.price),
                    close: tick.price,
                    volume: currentCandle.volume + (tick.volume || 0)
                },
                isNewCandle: false
            };
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
     */
    setTimeframe(timeframe, onUpdate) {
        this.currentTimeframe = timeframe;
        this.onExpirationUpdate = onUpdate;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.expirationTimer) {
            clearInterval(this.expirationTimer);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        this.expirationTimer = setInterval(() => {
            const timeLeft = this.getTimeUntilCandleClose(timeframe);
            const formatted = this.formatExpirationTime(timeLeft);
            
            if (this.onExpirationUpdate) {
                this.onExpirationUpdate(formatted, timeLeft, timeframe);
            }
        }, 1000);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const timeLeft = this.getTimeUntilCandleClose(timeframe);
        const formatted = this.formatExpirationTime(timeLeft);
        if (this.onExpirationUpdate) {
            this.onExpirationUpdate(formatted, timeLeft, timeframe);
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
     */
    stopExpirationTimer() {
        if (this.expirationTimer) {
            clearInterval(this.expirationTimer);
            this.expirationTimer = null;
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.stopExpirationTimer();
        this.onExpirationUpdate = null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
window.chartTimeframeManager = new ChartTimeframeManager();

console.log('üìÖ Chart Timeframe Manager initialized');
