// üéØ CHART TIMEFRAME MANAGER (Simplified + Server-Synced)
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º

class ChartTimeframeManager {
    constructor() {
        // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        this.timeframes = {
            'S5': 5,
            'S10': 10,
            'S15': 15,
            'S30': 30,
            'M1': 60,
            'M2': 120,
            'M3': 180,
            'M5': 300,
            'M10': 600,
            'M15': 900,
            'M30': 1800
        };
        
        this.currentTimeframe = 'S5';
        this.expirationTimer = null;
        this.onExpirationUpdate = null;
        
        // üéØ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –°–ï–†–í–ï–†–û–ú
        this.serverCandleStartTime = null; // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ (—Å —Å–µ—Ä–≤–µ—Ä–∞)
        this.serverTimeframeSeconds = null; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (—Å —Å–µ—Ä–≤–µ—Ä–∞)
        this.serverTimeDelta = 0; // –†–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä (ms)
        this.isSynced = false; // –§–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    }
    
    /**
     * üéØ –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
     * –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–≤–µ—á–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    syncWithServer(candleStartTime, timeframeSeconds, serverTime) {
        this.serverCandleStartTime = candleStartTime;
        this.serverTimeframeSeconds = timeframeSeconds;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏
        const clientTime = Math.floor(Date.now() / 1000);
        this.serverTimeDelta = (serverTime - clientTime) * 1000; // –≤ ms
        
        this.isSynced = true;
        
        console.log(`‚úÖ Timer synced:`, {
            candleStart: new Date(candleStartTime * 1000).toISOString(),
            duration: timeframeSeconds + 's',
            timeDelta: this.serverTimeDelta + 'ms'
        });
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
        this.updateTimerDisplay();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
     */
    getCurrentServerTime() {
        const clientNow = Date.now();
        const serverNow = clientNow + this.serverTimeDelta;
        return Math.floor(serverNow / 1000);
    }
    
    /**
     * –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å work4)
     */
    getTimeframeDuration(timeframe) {
        return this.timeframes[timeframe] || this.timeframes['S5'];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
     */
    getTimeUntilCandleClose() {
        if (!this.isSynced || !this.serverCandleStartTime || !this.serverTimeframeSeconds) {
            // Fallback –µ—Å–ª–∏ –Ω–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            return this.getFallbackTimeUntilClose();
        }
        
        const now = this.getCurrentServerTime();
        const candleEndTime = this.serverCandleStartTime + this.serverTimeframeSeconds;
        let remaining = candleEndTime - now;
        
        // –ï—Å–ª–∏ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å - –≤—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é
        if (remaining <= 0) {
            // –°–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π
            const candlesPassed = Math.floor((now - this.serverCandleStartTime) / this.serverTimeframeSeconds);
            const nextCandleStart = this.serverCandleStartTime + ((candlesPassed + 1) * this.serverTimeframeSeconds);
            const nextCandleEnd = nextCandleStart + this.serverTimeframeSeconds;
            remaining = nextCandleEnd - now;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
            this.serverCandleStartTime = nextCandleStart;
        }
        
        return Math.max(0, remaining);
    }
    
    /**
     * Fallback –º–µ—Ç–æ–¥ (–µ—Å–ª–∏ –Ω–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
     */
    getFallbackTimeUntilClose() {
        const now = Math.floor(Date.now() / 1000);
        const duration = this.timeframes[this.currentTimeframe] || 5;
        const candleStart = Math.floor(now / duration) * duration;
        const candleEnd = candleStart + duration;
        return candleEnd - now;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è (MM:SS)
     */
    formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }
    
    /**
     * –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å work4)
     */
    getTimeframeLabel(timeframe) {
        const labels = {
            'S5': 'S5 (5 sec)',
            'S10': 'S10 (10 sec)',
            'S15': 'S15 (15 sec)',
            'S30': 'S30 (30 sec)',
            'M1': 'M1 (1 min)',
            'M2': 'M2 (2 min)',
            'M3': 'M3 (3 min)',
            'M5': 'M5 (5 min)',
            'M10': 'M10 (10 min)',
            'M15': 'M15 (15 min)',
            'M30': 'M30 (30 min)'
        };
        return labels[timeframe] || timeframe;
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
     */
    updateTimerDisplay() {
        const timeLeft = this.getTimeUntilCandleClose();
        const formatted = this.formatTime(timeLeft);
        
        if (this.onExpirationUpdate) {
            this.onExpirationUpdate(formatted, timeLeft, this.currentTimeframe);
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
     */
    setTimeframe(timeframe, onUpdate) {
        this.currentTimeframe = timeframe;
        this.onExpirationUpdate = onUpdate;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä
        this.stopExpirationTimer();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        this.expirationTimer = setInterval(() => {
            this.updateTimerDisplay();
        }, 1000);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
        this.updateTimerDisplay();
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
     */
    stopExpirationTimer() {
        if (this.expirationTimer) {
            clearInterval(this.expirationTimer);
            this.expirationTimer = null;
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞
     */
    destroy() {
        this.stopExpirationTimer();
        this.onExpirationUpdate = null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.chartTimeframeManager = new ChartTimeframeManager();

console.log('‚è±Ô∏è Chart Timeframe Manager initialized');
